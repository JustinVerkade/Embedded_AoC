
Embedded_AoC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce4  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f50  08008f50  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008f50  08008f50  0000a00c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008f50  08008f50  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f50  08008f50  00009f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f54  08008f54  00009f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008f58  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  2000000c  08008f64  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08008f64  0000a4ac  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d68  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003006  00000000  00000000  00022daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00025db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001234  00000000  00000000  00027568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db38  00000000  00000000  0002879c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a21f  00000000  00000000  000562d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012229b  00000000  00000000  000704f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019278e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006614  00000000  00000000  001927d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00198de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000000c 	.word	0x2000000c
 8000270:	00000000 	.word	0x00000000
 8000274:	08008f20 	.word	0x08008f20

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000010 	.word	0x20000010
 8000290:	08008f20 	.word	0x08008f20

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fe58 	bl	8000f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f812 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 fa52 	bl	8000748 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80002a4:	f000 f882 	bl	80003ac <MX_DCACHE1_Init>
  MX_ICACHE_Init();
 80002a8:	f000 f896 	bl	80003d8 <MX_ICACHE_Init>
  MX_FMC_Init();
 80002ac:	f000 f9e4 	bl	8000678 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 80002b0:	f000 f89e 	bl	80003f0 <MX_SDMMC1_SD_Init>
  MX_TIM2_Init();
 80002b4:	f000 f8c0 	bl	8000438 <MX_TIM2_Init>
  MX_TIM12_Init();
 80002b8:	f000 f94a 	bl	8000550 <MX_TIM12_Init>
  MX_USB_PCD_Init();
 80002bc:	f000 f9aa 	bl	8000614 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <main+0x2c>

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b09c      	sub	sp, #112	@ 0x70
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0320 	add.w	r3, r7, #32
 80002ce:	2250      	movs	r2, #80	@ 0x50
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f008 fdf7 	bl	8008ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	f107 0308 	add.w	r3, r7, #8
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	605a      	str	r2, [r3, #4]
 80002e2:	609a      	str	r2, [r3, #8]
 80002e4:	60da      	str	r2, [r3, #12]
 80002e6:	611a      	str	r2, [r3, #16]
 80002e8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80002ea:	4b2e      	ldr	r3, [pc, #184]	@ (80003a4 <SystemClock_Config+0xe0>)
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	4a2d      	ldr	r2, [pc, #180]	@ (80003a4 <SystemClock_Config+0xe0>)
 80002f0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80002f4:	6113      	str	r3, [r2, #16]
 80002f6:	4b2b      	ldr	r3, [pc, #172]	@ (80003a4 <SystemClock_Config+0xe0>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000302:	bf00      	nop
 8000304:	4b27      	ldr	r3, [pc, #156]	@ (80003a4 <SystemClock_Config+0xe0>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	2b08      	cmp	r3, #8
 800030e:	d1f9      	bne.n	8000304 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000310:	2321      	movs	r3, #33	@ 0x21
 8000312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000318:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800031a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800031e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000320:	2302      	movs	r3, #2
 8000322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000324:	2303      	movs	r3, #3
 8000326:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000328:	2301      	movs	r3, #1
 800032a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 800032c:	231f      	movs	r3, #31
 800032e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000330:	2302      	movs	r3, #2
 8000332:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000334:	2302      	movs	r3, #2
 8000336:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000338:	2302      	movs	r3, #2
 800033a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800033c:	230c      	movs	r3, #12
 800033e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000340:	2300      	movs	r3, #0
 8000342:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 8000344:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000348:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0320 	add.w	r3, r7, #32
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fb90 	bl	8001a74 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800035a:	f000 fab7 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	231f      	movs	r3, #31
 8000360:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2303      	movs	r3, #3
 8000364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	2105      	movs	r1, #5
 800037c:	4618      	mov	r0, r3
 800037e:	f001 ffb1 	bl	80022e4 <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000388:	f000 faa0 	bl	80008cc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800038c:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <SystemClock_Config+0xe4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000394:	4a04      	ldr	r2, [pc, #16]	@ (80003a8 <SystemClock_Config+0xe4>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	3770      	adds	r7, #112	@ 0x70
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	44020800 	.word	0x44020800
 80003a8:	40022000 	.word	0x40022000

080003ac <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <MX_DCACHE1_Init+0x24>)
 80003b2:	4a08      	ldr	r2, [pc, #32]	@ (80003d4 <MX_DCACHE1_Init+0x28>)
 80003b4:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80003b6:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_DCACHE1_Init+0x24>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <MX_DCACHE1_Init+0x24>)
 80003be:	f001 f80b 	bl	80013d8 <HAL_DCACHE_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80003c8:	f000 fa80 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000028 	.word	0x20000028
 80003d4:	40031400 	.word	0x40031400

080003d8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003dc:	f001 fa06 	bl	80017ec <HAL_ICACHE_Enable>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80003e6:	f000 fa71 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80003f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 80003f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000434 <MX_SDMMC1_SD_Init+0x44>)
 80003f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80003fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000400:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000406:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000408:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800040c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800040e:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 8000416:	2200      	movs	r2, #0
 8000418:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_SDMMC1_SD_Init+0x40>)
 800041c:	f005 fd28 	bl	8005e70 <HAL_SD_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000426:	f000 fa51 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000054 	.word	0x20000054
 8000434:	46008000 	.word	0x46008000

08000438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b08e      	sub	sp, #56	@ 0x38
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000458:	463b      	mov	r3, r7
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800046a:	4b38      	ldr	r3, [pc, #224]	@ (800054c <MX_TIM2_Init+0x114>)
 800046c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000472:	4b36      	ldr	r3, [pc, #216]	@ (800054c <MX_TIM2_Init+0x114>)
 8000474:	2200      	movs	r2, #0
 8000476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b34      	ldr	r3, [pc, #208]	@ (800054c <MX_TIM2_Init+0x114>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800047e:	4b33      	ldr	r3, [pc, #204]	@ (800054c <MX_TIM2_Init+0x114>)
 8000480:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000484:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000486:	4b31      	ldr	r3, [pc, #196]	@ (800054c <MX_TIM2_Init+0x114>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048c:	4b2f      	ldr	r3, [pc, #188]	@ (800054c <MX_TIM2_Init+0x114>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000492:	482e      	ldr	r0, [pc, #184]	@ (800054c <MX_TIM2_Init+0x114>)
 8000494:	f006 fdbc 	bl	8007010 <HAL_TIM_Base_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800049e:	f000 fa15 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ac:	4619      	mov	r1, r3
 80004ae:	4827      	ldr	r0, [pc, #156]	@ (800054c <MX_TIM2_Init+0x114>)
 80004b0:	f006 ff7a 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80004ba:	f000 fa07 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004be:	4823      	ldr	r0, [pc, #140]	@ (800054c <MX_TIM2_Init+0x114>)
 80004c0:	f006 fdfd 	bl	80070be <HAL_TIM_PWM_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80004ca:	f000 f9ff 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ce:	2300      	movs	r3, #0
 80004d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	2300      	movs	r3, #0
 80004d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	4619      	mov	r1, r3
 80004dc:	481b      	ldr	r0, [pc, #108]	@ (800054c <MX_TIM2_Init+0x114>)
 80004de:	f007 fd3d 	bl	8007f5c <HAL_TIMEx_MasterConfigSynchronization>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004e8:	f000 f9f0 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	2360      	movs	r3, #96	@ 0x60
 80004ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	4812      	ldr	r0, [pc, #72]	@ (800054c <MX_TIM2_Init+0x114>)
 8000504:	f006 fe3c 	bl	8007180 <HAL_TIM_PWM_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800050e:	f000 f9dd 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000512:	463b      	mov	r3, r7
 8000514:	2204      	movs	r2, #4
 8000516:	4619      	mov	r1, r3
 8000518:	480c      	ldr	r0, [pc, #48]	@ (800054c <MX_TIM2_Init+0x114>)
 800051a:	f006 fe31 	bl	8007180 <HAL_TIM_PWM_ConfigChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000524:	f000 f9d2 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000528:	463b      	mov	r3, r7
 800052a:	2208      	movs	r2, #8
 800052c:	4619      	mov	r1, r3
 800052e:	4807      	ldr	r0, [pc, #28]	@ (800054c <MX_TIM2_Init+0x114>)
 8000530:	f006 fe26 	bl	8007180 <HAL_TIM_PWM_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800053a:	f000 f9c7 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800053e:	4803      	ldr	r0, [pc, #12]	@ (800054c <MX_TIM2_Init+0x114>)
 8000540:	f000 fae4 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 8000544:	bf00      	nop
 8000546:	3738      	adds	r7, #56	@ 0x38
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000d0 	.word	0x200000d0

08000550 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	@ 0x30
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_TIM12_Init+0xbc>)
 8000578:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <MX_TIM12_Init+0xc0>)
 800057a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <MX_TIM12_Init+0xbc>)
 800057e:	2200      	movs	r2, #0
 8000580:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_TIM12_Init+0xbc>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000588:	4b20      	ldr	r3, [pc, #128]	@ (800060c <MX_TIM12_Init+0xbc>)
 800058a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800058e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000590:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <MX_TIM12_Init+0xbc>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000596:	4b1d      	ldr	r3, [pc, #116]	@ (800060c <MX_TIM12_Init+0xbc>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800059c:	481b      	ldr	r0, [pc, #108]	@ (800060c <MX_TIM12_Init+0xbc>)
 800059e:	f006 fd37 	bl	8007010 <HAL_TIM_Base_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80005a8:	f000 f990 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4619      	mov	r1, r3
 80005b8:	4814      	ldr	r0, [pc, #80]	@ (800060c <MX_TIM12_Init+0xbc>)
 80005ba:	f006 fef5 	bl	80073a8 <HAL_TIM_ConfigClockSource>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80005c4:	f000 f982 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80005c8:	4810      	ldr	r0, [pc, #64]	@ (800060c <MX_TIM12_Init+0xbc>)
 80005ca:	f006 fd78 	bl	80070be <HAL_TIM_PWM_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80005d4:	f000 f97a 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d8:	2360      	movs	r3, #96	@ 0x60
 80005da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <MX_TIM12_Init+0xbc>)
 80005f0:	f006 fdc6 	bl	8007180 <HAL_TIM_PWM_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80005fa:	f000 f967 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80005fe:	4803      	ldr	r0, [pc, #12]	@ (800060c <MX_TIM12_Init+0xbc>)
 8000600:	f000 fa84 	bl	8000b0c <HAL_TIM_MspPostInit>

}
 8000604:	bf00      	nop
 8000606:	3730      	adds	r7, #48	@ 0x30
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	2000011c 	.word	0x2000011c
 8000610:	40001800 	.word	0x40001800

08000614 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <MX_USB_PCD_Init+0x60>)
 800061c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000620:	2208      	movs	r2, #8
 8000622:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000626:	2202      	movs	r2, #2
 8000628:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 800062c:	2202      	movs	r2, #2
 800062e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000632:	2200      	movs	r2, #0
 8000634:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000638:	2200      	movs	r2, #0
 800063a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 800063e:	2200      	movs	r2, #0
 8000640:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000644:	2200      	movs	r2, #0
 8000646:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 800064a:	2200      	movs	r2, #0
 800064c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000650:	2200      	movs	r2, #0
 8000652:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 8000656:	2200      	movs	r2, #0
 8000658:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_USB_PCD_Init+0x5c>)
 800065c:	f001 f8d6 	bl	800180c <HAL_PCD_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000666:	f000 f931 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000168 	.word	0x20000168
 8000674:	40016000 	.word	0x40016000

08000678 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f008 fc1e 	bl	8008ec6 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <MX_FMC_Init+0xc4>)
 800068c:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <MX_FMC_Init+0xc8>)
 800068e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000690:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <MX_FMC_Init+0xc4>)
 8000692:	4a2c      	ldr	r2, [pc, #176]	@ (8000744 <MX_FMC_Init+0xcc>)
 8000694:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_FMC_Init+0xc4>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800069c:	4b27      	ldr	r3, [pc, #156]	@ (800073c <MX_FMC_Init+0xc4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_FMC_Init+0xc4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_FMC_Init+0xc4>)
 80006aa:	2210      	movs	r2, #16
 80006ac:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <MX_FMC_Init+0xc4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <MX_FMC_Init+0xc4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <MX_FMC_Init+0xc4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <MX_FMC_Init+0xc4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_FMC_Init+0xc4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <MX_FMC_Init+0xc4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_FMC_Init+0xc4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_FMC_Init+0xc4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <MX_FMC_Init+0xc4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_FMC_Init+0xc4>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_FMC_Init+0xc4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_FMC_Init+0xc4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_FMC_Init+0xc4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 80006fe:	230f      	movs	r3, #15
 8000700:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000702:	230f      	movs	r3, #15
 8000704:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000706:	23ff      	movs	r3, #255	@ 0xff
 8000708:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800070e:	230f      	movs	r3, #15
 8000710:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000712:	2310      	movs	r3, #16
 8000714:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000716:	2311      	movs	r3, #17
 8000718:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_FMC_Init+0xc4>)
 8000726:	f006 fc23 	bl	8006f70 <HAL_SRAM_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000730:	f000 f8cc 	bl	80008cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000044c 	.word	0x2000044c
 8000740:	47000400 	.word	0x47000400
 8000744:	47000504 	.word	0x47000504

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	@ 0x38
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075e:	4b56      	ldr	r3, [pc, #344]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000764:	4a54      	ldr	r2, [pc, #336]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800076e:	4b52      	ldr	r3, [pc, #328]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000774:	f003 0310 	and.w	r3, r3, #16
 8000778:	623b      	str	r3, [r7, #32]
 800077a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077c:	4b4e      	ldr	r3, [pc, #312]	@ (80008b8 <MX_GPIO_Init+0x170>)
 800077e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000782:	4a4d      	ldr	r2, [pc, #308]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078c:	4b4a      	ldr	r3, [pc, #296]	@ (80008b8 <MX_GPIO_Init+0x170>)
 800078e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000792:	f003 0320 	and.w	r3, r3, #32
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	4b47      	ldr	r3, [pc, #284]	@ (80008b8 <MX_GPIO_Init+0x170>)
 800079c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a0:	4a45      	ldr	r2, [pc, #276]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007aa:	4b43      	ldr	r3, [pc, #268]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b3f      	ldr	r3, [pc, #252]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007be:	4a3e      	ldr	r2, [pc, #248]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007c8:	4b3b      	ldr	r3, [pc, #236]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b38      	ldr	r3, [pc, #224]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007dc:	4a36      	ldr	r2, [pc, #216]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e6:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007fa:	4a2f      	ldr	r2, [pc, #188]	@ (80008b8 <MX_GPIO_Init+0x170>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000804:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000806:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000818:	4a27      	ldr	r2, [pc, #156]	@ (80008b8 <MX_GPIO_Init+0x170>)
 800081a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800081e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000822:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000836:	4a20      	ldr	r2, [pc, #128]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000840:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_GPIO_Init+0x170>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USER_Pin */
  GPIO_InitStruct.Pin = USER_Pin;
 800084e:	2320      	movs	r3, #32
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000856:	2301      	movs	r3, #1
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085e:	4619      	mov	r1, r3
 8000860:	4816      	ldr	r0, [pc, #88]	@ (80008bc <MX_GPIO_Init+0x174>)
 8000862:	f000 fe65 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LEFT_Pin */
  GPIO_InitStruct.Pin = USER_LEFT_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086e:	2301      	movs	r3, #1
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_LEFT_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <MX_GPIO_Init+0x178>)
 800087a:	f000 fe59 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_DOWN_Pin USER_UP_Pin USER_RIGHT_Pin */
  GPIO_InitStruct.Pin = USER_DOWN_Pin|USER_UP_Pin|USER_RIGHT_Pin;
 800087e:	2307      	movs	r3, #7
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000886:	2301      	movs	r3, #1
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0x17c>)
 8000892:	f000 fe4d 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC1_CD_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin;
 8000896:	2304      	movs	r3, #4
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089e:	2301      	movs	r3, #1
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SDMMC1_CD_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_GPIO_Init+0x180>)
 80008aa:	f000 fe41 	bl	8001530 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ae:	bf00      	nop
 80008b0:	3738      	adds	r7, #56	@ 0x38
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	44020c00 	.word	0x44020c00
 80008bc:	42020000 	.word	0x42020000
 80008c0:	42020800 	.word	0x42020800
 80008c4:	42020400 	.word	0x42020400
 80008c8:	42020c00 	.word	0x42020c00

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <HAL_DCACHE_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcache: DCACHE handle pointer
  * @retval None
  */
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000924 <HAL_DCACHE_MspInit+0x3c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d10e      	bne.n	8000918 <HAL_DCACHE_MspInit+0x30>
  {
    /* USER CODE BEGIN DCACHE1_MspInit 0 */

    /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_DCACHE_MspInit+0x40>)
 80008fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000900:	4a09      	ldr	r2, [pc, #36]	@ (8000928 <HAL_DCACHE_MspInit+0x40>)
 8000902:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000906:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800090a:	4b07      	ldr	r3, [pc, #28]	@ (8000928 <HAL_DCACHE_MspInit+0x40>)
 800090c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000910:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END DCACHE1_MspInit 1 */

  }

}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40031400 	.word	0x40031400
 8000928:	44020c00 	.word	0x44020c00

0800092c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0c0      	sub	sp, #256	@ 0x100
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	22d0      	movs	r2, #208	@ 0xd0
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f008 faba 	bl	8008ec6 <memset>
  if(hsd->Instance==SDMMC1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a4c      	ldr	r2, [pc, #304]	@ (8000a88 <HAL_SD_MspInit+0x15c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	f040 8090 	bne.w	8000a7e <HAL_SD_MspInit+0x152>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800095e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL1Q;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fff7 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000980:	f7ff ffa4 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000984:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 8000986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800098a:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 800098c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000990:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000994:	4b3d      	ldr	r3, [pc, #244]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 8000996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800099a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009a8:	4a38      	ldr	r2, [pc, #224]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009b2:	4b36      	ldr	r3, [pc, #216]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c0:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009c6:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009d0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009de:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009e4:	4a29      	ldr	r2, [pc, #164]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009ee:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <HAL_SD_MspInit+0x160>)
 80009f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD7     ------> SDMMC1_CMD
    PG9     ------> SDMMC1_D0
    PG10     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80009fc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a16:	230c      	movs	r3, #12
 8000a18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a20:	4619      	mov	r1, r3
 8000a22:	481b      	ldr	r0, [pc, #108]	@ (8000a90 <HAL_SD_MspInit+0x164>)
 8000a24:	f000 fd84 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC1;
 8000a40:	230b      	movs	r3, #11
 8000a42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <HAL_SD_MspInit+0x168>)
 8000a4e:	f000 fd6f 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC1;
 8000a6c:	230b      	movs	r3, #11
 8000a6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a72:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <HAL_SD_MspInit+0x16c>)
 8000a7a:	f000 fd59 	bl	8001530 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8000a7e:	bf00      	nop
 8000a80:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	46008000 	.word	0x46008000
 8000a8c:	44020c00 	.word	0x44020c00
 8000a90:	42020800 	.word	0x42020800
 8000a94:	42020c00 	.word	0x42020c00
 8000a98:	42021800 	.word	0x42021800

08000a9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aac:	d10f      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_TIM_Base_MspInit+0x68>)
 8000ab0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ab4:	4a13      	ldr	r2, [pc, #76]	@ (8000b04 <HAL_TIM_Base_MspInit+0x68>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_TIM_Base_MspInit+0x68>)
 8000ac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000acc:	e013      	b.n	8000af6 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM12)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <HAL_TIM_Base_MspInit+0x6c>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d10e      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <HAL_TIM_Base_MspInit+0x68>)
 8000ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ade:	4a09      	ldr	r2, [pc, #36]	@ (8000b04 <HAL_TIM_Base_MspInit+0x68>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_TIM_Base_MspInit+0x68>)
 8000aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	44020c00 	.word	0x44020c00
 8000b08:	40001800 	.word	0x40001800

08000b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	@ 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b2c:	d11f      	bne.n	8000b6e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb4>)
 8000b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b34:	4a22      	ldr	r2, [pc, #136]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb4>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE_Pin;
 8000b4c:	2307      	movs	r3, #7
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	4817      	ldr	r0, [pc, #92]	@ (8000bc4 <HAL_TIM_MspPostInit+0xb8>)
 8000b68:	f000 fce2 	bl	8001530 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000b6c:	e024      	b.n	8000bb8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM12)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a15      	ldr	r2, [pc, #84]	@ (8000bc8 <HAL_TIM_MspPostInit+0xbc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d11f      	bne.n	8000bb8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb4>)
 8000b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b7e:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb4>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b88:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <HAL_TIM_MspPostInit+0xb4>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000b96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <HAL_TIM_MspPostInit+0xc0>)
 8000bb4:	f000 fcbc 	bl	8001530 <HAL_GPIO_Init>
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	44020c00 	.word	0x44020c00
 8000bc4:	42020000 	.word	0x42020000
 8000bc8:	40001800 	.word	0x40001800
 8000bcc:	42020400 	.word	0x42020400

08000bd0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0b8      	sub	sp, #224	@ 0xe0
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	22d0      	movs	r2, #208	@ 0xd0
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f008 f970 	bl	8008ec6 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <HAL_PCD_MspInit+0x70>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d123      	bne.n	8000c38 <HAL_PCD_MspInit+0x68>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0310 	mov.w	r3, #16
 8000bf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000bfc:	2330      	movs	r3, #48	@ 0x30
 8000bfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c02:	f107 0310 	add.w	r3, r7, #16
 8000c06:	4618      	mov	r0, r3
 8000c08:	f001 feae 	bl	8002968 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8000c12:	f7ff fe5b 	bl	80008cc <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8000c16:	f000 ff1d 	bl	8001a54 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_PCD_MspInit+0x74>)
 8000c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c20:	4a08      	ldr	r2, [pc, #32]	@ (8000c44 <HAL_PCD_MspInit+0x74>)
 8000c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c26:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_PCD_MspInit+0x74>)
 8000c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000c38:	bf00      	nop
 8000c3a:	37e0      	adds	r7, #224	@ 0xe0
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40016000 	.word	0x40016000
 8000c44:	44020c00 	.word	0x44020c00

08000c48 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000c5c:	4b43      	ldr	r3, [pc, #268]	@ (8000d6c <HAL_FMC_MspInit+0x124>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d17f      	bne.n	8000d64 <HAL_FMC_MspInit+0x11c>
    return;
  }
  FMC_Initialized = 1;
 8000c64:	4b41      	ldr	r3, [pc, #260]	@ (8000d6c <HAL_FMC_MspInit+0x124>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000c6a:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <HAL_FMC_MspInit+0x128>)
 8000c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c70:	4a3f      	ldr	r2, [pc, #252]	@ (8000d70 <HAL_FMC_MspInit+0x128>)
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d70 <HAL_FMC_MspInit+0x128>)
 8000c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]
  PA15(JTDI)   ------> FMC_NBL1
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PE0   ------> FMC_NBL0
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8000c88:	f64f 73b9 	movw	r3, #65465	@ 0xffb9
 8000c8c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2302      	movs	r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4834      	ldr	r0, [pc, #208]	@ (8000d74 <HAL_FMC_MspInit+0x12c>)
 8000ca4:	f000 fc44 	bl	8001530 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ca8:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000cac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482d      	ldr	r0, [pc, #180]	@ (8000d78 <HAL_FMC_MspInit+0x130>)
 8000cc4:	f000 fc34 	bl	8001530 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF13_FMC;
 8000cd8:	230d      	movs	r3, #13
 8000cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4826      	ldr	r0, [pc, #152]	@ (8000d7c <HAL_FMC_MspInit+0x134>)
 8000ce2:	f000 fc25 	bl	8001530 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ce6:	233f      	movs	r3, #63	@ 0x3f
 8000ce8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4820      	ldr	r0, [pc, #128]	@ (8000d80 <HAL_FMC_MspInit+0x138>)
 8000d00:	f000 fc16 	bl	8001530 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d04:	f64f 7303 	movw	r3, #65283	@ 0xff03
 8000d08:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d12:	2302      	movs	r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d16:	230c      	movs	r3, #12
 8000d18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4819      	ldr	r0, [pc, #100]	@ (8000d84 <HAL_FMC_MspInit+0x13c>)
 8000d20:	f000 fc06 	bl	8001530 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8000d34:	2309      	movs	r3, #9
 8000d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <HAL_FMC_MspInit+0x140>)
 8000d3e:	f000 fbf7 	bl	8001530 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000d42:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000d46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d50:	2302      	movs	r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d54:	230c      	movs	r3, #12
 8000d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4807      	ldr	r0, [pc, #28]	@ (8000d7c <HAL_FMC_MspInit+0x134>)
 8000d5e:	f000 fbe7 	bl	8001530 <HAL_GPIO_Init>
 8000d62:	e000      	b.n	8000d66 <HAL_FMC_MspInit+0x11e>
    return;
 8000d64:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200004a4 	.word	0x200004a4
 8000d70:	44020c00 	.word	0x44020c00
 8000d74:	42021000 	.word	0x42021000
 8000d78:	42021400 	.word	0x42021400
 8000d7c:	42020000 	.word	0x42020000
 8000d80:	42021800 	.word	0x42021800
 8000d84:	42020c00 	.word	0x42020c00
 8000d88:	42020800 	.word	0x42020800

08000d8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d94:	f7ff ff58 	bl	8000c48 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f000 f947 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e06:	4b35      	ldr	r3, [pc, #212]	@ (8000edc <SystemInit+0xdc>)
 8000e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0c:	4a33      	ldr	r2, [pc, #204]	@ (8000edc <SystemInit+0xdc>)
 8000e0e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <SystemInit+0xe0>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <SystemInit+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <SystemInit+0xe0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000e28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <SystemInit+0xe0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	492c      	ldr	r1, [pc, #176]	@ (8000ee0 <SystemInit+0xe0>)
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee4 <SystemInit+0xe4>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <SystemInit+0xe0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <SystemInit+0xe0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <SystemInit+0xe0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000e46:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <SystemInit+0xe0>)
 8000e48:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <SystemInit+0xe8>)
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <SystemInit+0xe0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000e52:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <SystemInit+0xe0>)
 8000e54:	4a24      	ldr	r2, [pc, #144]	@ (8000ee8 <SystemInit+0xe8>)
 8000e56:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <SystemInit+0xe0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <SystemInit+0xe0>)
 8000e60:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <SystemInit+0xe8>)
 8000e62:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee0 <SystemInit+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <SystemInit+0xe0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <SystemInit+0xe0>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <SystemInit+0xe0>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <SystemInit+0xdc>)
 8000e7e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e82:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <SystemInit+0xec>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000e8c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000e94:	d003      	beq.n	8000e9e <SystemInit+0x9e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000e9c:	d117      	bne.n	8000ece <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <SystemInit+0xec>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d005      	beq.n	8000eb6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <SystemInit+0xec>)
 8000eac:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <SystemInit+0xf0>)
 8000eae:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <SystemInit+0xec>)
 8000eb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <SystemInit+0xf4>)
 8000eb4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <SystemInit+0xec>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <SystemInit+0xec>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <SystemInit+0xec>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <SystemInit+0xec>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	61d3      	str	r3, [r2, #28]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	44020c00 	.word	0x44020c00
 8000ee4:	eae2eae3 	.word	0xeae2eae3
 8000ee8:	01010280 	.word	0x01010280
 8000eec:	40022000 	.word	0x40022000
 8000ef0:	08192a3b 	.word	0x08192a3b
 8000ef4:	4c5d6e7f 	.word	0x4c5d6e7f

08000ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000efc:	f7ff ff80 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f02:	490d      	ldr	r1, [pc, #52]	@ (8000f38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f04:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <LoopForever+0xe>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f18:	4c0a      	ldr	r4, [pc, #40]	@ (8000f44 <LoopForever+0x16>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f26:	f007 ffd7 	bl	8008ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f2a:	f7ff f9b3 	bl	8000294 <main>

08000f2e <LoopForever>:

LoopForever:
    b LoopForever
 8000f2e:	e7fe      	b.n	8000f2e <LoopForever>
  ldr   r0, =_estack
 8000f30:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f3c:	08008f58 	.word	0x08008f58
  ldr r2, =_sbss
 8000f40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f44:	200004ac 	.word	0x200004ac

08000f48 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f48:	e7fe      	b.n	8000f48 <ADC1_IRQHandler>
	...

08000f4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f96c 	bl	800122e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000f56:	f001 fb7d 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_Init+0x44>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f003 030f 	and.w	r3, r3, #15
 8000f64:	490b      	ldr	r1, [pc, #44]	@ (8000f94 <HAL_Init+0x48>)
 8000f66:	5ccb      	ldrb	r3, [r1, r3]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_Init+0x4c>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f70:	2004      	movs	r0, #4
 8000f72:	f000 f9a3 	bl	80012bc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 f810 	bl	8000f9c <HAL_InitTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e002      	b.n	8000f8c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f86:	f7ff fca7 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	44020c00 	.word	0x44020c00
 8000f94:	08008f38 	.word	0x08008f38
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000fa8:	4b33      	ldr	r3, [pc, #204]	@ (8001078 <HAL_InitTick+0xdc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e05c      	b.n	800106e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000fb4:	4b31      	ldr	r3, [pc, #196]	@ (800107c <HAL_InitTick+0xe0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d10c      	bne.n	8000fda <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <HAL_InitTick+0xe4>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <HAL_InitTick+0xdc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e037      	b.n	800104a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000fda:	f000 f9c7 	bl	800136c <HAL_SYSTICK_GetCLKSourceConfig>
 8000fde:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d023      	beq.n	800102e <HAL_InitTick+0x92>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d82d      	bhi.n	8001048 <HAL_InitTick+0xac>
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_InitTick+0x5e>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d00d      	beq.n	8001014 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ff8:	e026      	b.n	8001048 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <HAL_InitTick+0xe4>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <HAL_InitTick+0xdc>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001008:	fbb3 f3f1 	udiv	r3, r3, r1
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	60fb      	str	r3, [r7, #12]
        break;
 8001012:	e01a      	b.n	800104a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <HAL_InitTick+0xdc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001022:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	60fb      	str	r3, [r7, #12]
        break;
 800102c:	e00d      	b.n	800104a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_InitTick+0xdc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001038:	fbb3 f3f2 	udiv	r3, r3, r2
 800103c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	60fb      	str	r3, [r7, #12]
        break;
 8001046:	e000      	b.n	800104a <HAL_InitTick+0xae>
        break;
 8001048:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f914 	bl	8001278 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e009      	b.n	800106e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	2200      	movs	r2, #0
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001062:	f000 f8ef 	bl	8001244 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001066:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <HAL_InitTick+0xe8>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008
 800107c:	e000e010 	.word	0xe000e010
 8001080:	20000000 	.word	0x20000000
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200004a8 	.word	0x200004a8

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200004a8 	.word	0x200004a8

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff6a 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001252:	f7ff ff81 	bl	8001158 <__NVIC_GetPriorityGrouping>
 8001256:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff ffb3 	bl	80011c8 <NVIC_EncodePriority>
 8001262:	4602      	mov	r2, r0
 8001264:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff82 	bl	8001174 <__NVIC_SetPriority>
}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001288:	d301      	bcc.n	800128e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800128a:	2301      	movs	r3, #1
 800128c:	e00d      	b.n	80012aa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <HAL_SYSTICK_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_SYSTICK_Config+0x40>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_SYSTICK_Config+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <HAL_SYSTICK_Config+0x40>)
 80012a2:	f043 0303 	orr.w	r3, r3, #3
 80012a6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d844      	bhi.n	8001354 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80012ca:	a201      	add	r2, pc, #4	@ (adr r2, 80012d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012f3 	.word	0x080012f3
 80012d4:	08001311 	.word	0x08001311
 80012d8:	08001333 	.word	0x08001333
 80012dc:	08001355 	.word	0x08001355
 80012e0:	080012e5 	.word	0x080012e5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6013      	str	r3, [r2, #0]
      break;
 80012f0:	e031      	b.n	8001356 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80012f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001300:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001304:	4a18      	ldr	r2, [pc, #96]	@ (8001368 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001306:	f023 030c 	bic.w	r3, r3, #12
 800130a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800130e:	e022      	b.n	8001356 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001310:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001316:	f023 0304 	bic.w	r3, r3, #4
 800131a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800131e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001322:	f023 030c 	bic.w	r3, r3, #12
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001330:	e011      	b.n	8001356 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001338:	f023 0304 	bic.w	r3, r3, #4
 800133c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001340:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001344:	f023 030c 	bic.w	r3, r3, #12
 8001348:	4a07      	ldr	r2, [pc, #28]	@ (8001368 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001352:	e000      	b.n	8001356 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001354:	bf00      	nop
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e010 	.word	0xe000e010
 8001368:	44020c00 	.word	0x44020c00

0800136c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001372:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800137e:	2304      	movs	r3, #4
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e01e      	b.n	80013c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b08      	cmp	r3, #8
 8001394:	d00f      	beq.n	80013b6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b08      	cmp	r3, #8
 800139a:	d80f      	bhi.n	80013bc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d003      	beq.n	80013b0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80013a8:	e008      	b.n	80013bc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
        break;
 80013ae:	e008      	b.n	80013c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
        break;
 80013b4:	e005      	b.n	80013c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80013b6:	2302      	movs	r3, #2
 80013b8:	607b      	str	r3, [r7, #4]
        break;
 80013ba:	e002      	b.n	80013c2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
        break;
 80013c0:	bf00      	nop
    }
  }
  return systick_source;
 80013c2:	687b      	ldr	r3, [r7, #4]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e010 	.word	0xe000e010
 80013d4:	44020c00 	.word	0x44020c00

080013d8 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e037      	b.n	800145a <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d119      	bne.n	800142a <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001464 <HAL_DCACHE_Init+0x8c>)
 80013fa:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001468 <HAL_DCACHE_Init+0x90>)
 8001400:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_DCACHE_Init+0x94>)
 8001406:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <HAL_DCACHE_Init+0x98>)
 800140c:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <HAL_DCACHE_Init+0x9c>)
 8001412:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a16      	ldr	r2, [pc, #88]	@ (8001478 <HAL_DCACHE_Init+0xa0>)
 8001420:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f814 	bl	800147c <HAL_DCACHE_Enable>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]

  return status;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800151b 	.word	0x0800151b
 8001468:	080014cb 	.word	0x080014cb
 800146c:	080014df 	.word	0x080014df
 8001470:	08001507 	.word	0x08001507
 8001474:	080014f3 	.word	0x080014f3
 8001478:	080008e9 	.word	0x080008e9

0800147c <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e015      	b.n	80014be <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0309 	and.w	r3, r3, #9
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 80014a0:	2302      	movs	r3, #2
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e00a      	b.n	80014bc <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
  }

  return status;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800153e:	e142      	b.n	80017c6 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8134 	beq.w	80017c0 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x38>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b12      	cmp	r3, #18
 8001566:	d125      	bne.n	80015b4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4013      	ands	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	6979      	ldr	r1, [r7, #20]
 80015b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4013      	ands	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0203 	and.w	r2, r3, #3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	4313      	orrs	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d00b      	beq.n	8001608 <HAL_GPIO_Init+0xd8>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d007      	beq.n	8001608 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015fc:	2b11      	cmp	r3, #17
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b12      	cmp	r3, #18
 8001606:	d130      	bne.n	800166a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800163e:	2201      	movs	r2, #1
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	4013      	ands	r3, r2
 800164c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 0201 	and.w	r2, r3, #1
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b03      	cmp	r3, #3
 8001674:	d109      	bne.n	800168a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800167e:	2b03      	cmp	r3, #3
 8001680:	d11b      	bne.n	80016ba <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4013      	ands	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d07c      	beq.n	80017c0 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80016c6:	4a47      	ldr	r2, [pc, #284]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3318      	adds	r3, #24
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4013      	ands	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	0a9a      	lsrs	r2, r3, #10
 80016ee:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	f002 0203 	and.w	r2, r2, #3
 80016f8:	00d2      	lsls	r2, r2, #3
 80016fa:	4093      	lsls	r3, r2
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001702:	4938      	ldr	r1, [pc, #224]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	089b      	lsrs	r3, r3, #2
 8001708:	3318      	adds	r3, #24
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001710:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001734:	4a2b      	ldr	r2, [pc, #172]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800173a:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43db      	mvns	r3, r3
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4013      	ands	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800175e:	4a21      	ldr	r2, [pc, #132]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 8001766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800176a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4013      	ands	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800178a:	4a16      	ldr	r2, [pc, #88]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 8001794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001798:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3301      	adds	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f47f aeb5 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	44022000 	.word	0x44022000
 80017e8:	002f7f7f 	.word	0x002f7f7f

080017ec <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80017f0:	4b05      	ldr	r3, [pc, #20]	@ (8001808 <HAL_ICACHE_Enable+0x1c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_ICACHE_Enable+0x1c>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40030400 	.word	0x40030400

0800180c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af02      	add	r7, sp, #8
 8001812:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0f3      	b.n	8001a06 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff f9cc 	bl	8000bd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f007 fad2 	bl	8008dee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7c1a      	ldrb	r2, [r3, #16]
 8001852:	f88d 2000 	strb.w	r2, [sp]
 8001856:	3304      	adds	r3, #4
 8001858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185a:	f007 faaa 	bl	8008db2 <USB_CoreInit>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2202      	movs	r2, #2
 8001868:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0ca      	b.n	8001a06 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f007 face 	bl	8008e18 <USB_SetCurrentMode>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0bb      	b.n	8001a06 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e03f      	b.n	8001914 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001894:	7bfa      	ldrb	r2, [r7, #15]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3315      	adds	r3, #21
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3314      	adds	r3, #20
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3317      	adds	r3, #23
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3324      	adds	r3, #36	@ 0x24
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3328      	adds	r3, #40	@ 0x28
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3304      	adds	r3, #4
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	3301      	adds	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3ba      	bcc.n	8001894 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e044      	b.n	80019ae <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	440b      	add	r3, r1
 8001974:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	3301      	adds	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	791b      	ldrb	r3, [r3, #4]
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3b5      	bcc.n	8001924 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7c1a      	ldrb	r2, [r3, #16]
 80019c0:	f88d 2000 	strb.w	r2, [sp]
 80019c4:	3304      	adds	r3, #4
 80019c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c8:	f007 fa49 	bl	8008e5e <USB_DevInit>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e013      	b.n	8001a06 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7b1b      	ldrb	r3, [r3, #12]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f80a 	bl	8001a0e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f007 fa50 	bl	8008ea4 <USB_DevDisconnect>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3c:	f043 0202 	orr.w	r2, r3, #2
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001a5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a62:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	44020800 	.word	0x44020800

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f000 bc28 	b.w	80022d8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a88:	4b94      	ldr	r3, [pc, #592]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f003 0318 	and.w	r3, r3, #24
 8001a90:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001a92:	4b92      	ldr	r3, [pc, #584]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d05b      	beq.n	8001b60 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x46>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	2b18      	cmp	r3, #24
 8001ab2:	d114      	bne.n	8001ade <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d111      	bne.n	8001ade <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f000 bc08 	b.w	80022d8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001ac8:	4b84      	ldr	r3, [pc, #528]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	4981      	ldr	r1, [pc, #516]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001adc:	e040      	b.n	8001b60 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d023      	beq.n	8001b2e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7c      	ldr	r2, [pc, #496]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fadd 	bl	80010b0 <HAL_GetTick>
 8001af6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001afa:	f7ff fad9 	bl	80010b0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e3e5      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001b0c:	4b73      	ldr	r3, [pc, #460]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001b18:	4b70      	ldr	r3, [pc, #448]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	496d      	ldr	r1, [pc, #436]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	618b      	str	r3, [r1, #24]
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b2e:	4b6b      	ldr	r3, [pc, #428]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6a      	ldr	r2, [pc, #424]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fab9 	bl	80010b0 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001b42:	f7ff fab5 	bl	80010b0 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e3c1      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b54:	4b61      	ldr	r3, [pc, #388]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a0 	beq.w	8001cae <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x10c>
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b18      	cmp	r3, #24
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 8092 	bne.w	8001cae <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e3a4      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x132>
 8001b98:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001b9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e058      	b.n	8001c58 <HAL_RCC_OscConfig+0x1e4>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x160>
 8001bae:	4b4b      	ldr	r3, [pc, #300]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b48      	ldr	r3, [pc, #288]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a47      	ldr	r2, [pc, #284]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bc0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b45      	ldr	r3, [pc, #276]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a44      	ldr	r2, [pc, #272]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e041      	b.n	8001c58 <HAL_RCC_OscConfig+0x1e4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bdc:	d112      	bne.n	8001c04 <HAL_RCC_OscConfig+0x190>
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a3e      	ldr	r2, [pc, #248]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b3c      	ldr	r3, [pc, #240]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a3b      	ldr	r2, [pc, #236]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bf0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a38      	ldr	r2, [pc, #224]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e029      	b.n	8001c58 <HAL_RCC_OscConfig+0x1e4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x1c0>
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b2d      	ldr	r3, [pc, #180]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e011      	b.n	8001c58 <HAL_RCC_OscConfig+0x1e4>
 8001c34:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a28      	ldr	r2, [pc, #160]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c3e:	6013      	str	r3, [r2, #0]
 8001c40:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fa26 	bl	80010b0 <HAL_GetTick>
 8001c64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fa22 	bl	80010b0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	@ 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e32e      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7a:	4b18      	ldr	r3, [pc, #96]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1f4>
 8001c86:	e012      	b.n	8001cae <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fa12 	bl	80010b0 <HAL_GetTick>
 8001c8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fa0e 	bl	80010b0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e31a      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <HAL_RCC_OscConfig+0x268>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 809a 	beq.w	8001df0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x25a>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	2b18      	cmp	r3, #24
 8001cc6:	d149      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d146      	bne.n	8001d5c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e2fe      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
 8001cda:	bf00      	nop
 8001cdc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001ce6:	4b9a      	ldr	r3, [pc, #616]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0218 	and.w	r2, r3, #24
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d014      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001cf6:	4b96      	ldr	r3, [pc, #600]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0218 	bic.w	r2, r3, #24
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	4993      	ldr	r1, [pc, #588]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001d08:	f000 fdd0 	bl	80028ac <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d0c:	4b91      	ldr	r3, [pc, #580]	@ (8001f54 <HAL_RCC_OscConfig+0x4e0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff f943 	bl	8000f9c <HAL_InitTick>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e2db      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f9c6 	bl	80010b0 <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f9c2 	bl	80010b0 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e2ce      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d3a:	4b85      	ldr	r3, [pc, #532]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001d46:	4b82      	ldr	r3, [pc, #520]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	497e      	ldr	r1, [pc, #504]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001d5a:	e049      	b.n	8001df0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d02c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001d64:	4b7a      	ldr	r3, [pc, #488]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0218 	bic.w	r2, r3, #24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	4977      	ldr	r1, [pc, #476]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001d76:	4b76      	ldr	r3, [pc, #472]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d82:	f7ff f995 	bl	80010b0 <HAL_GetTick>
 8001d86:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff f991 	bl	80010b0 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e29d      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001da8:	4b69      	ldr	r3, [pc, #420]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	4966      	ldr	r1, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	610b      	str	r3, [r1, #16]
 8001dbc:	e018      	b.n	8001df0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b64      	ldr	r3, [pc, #400]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a63      	ldr	r2, [pc, #396]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f971 	bl	80010b0 <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f96d 	bl	80010b0 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e279      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de4:	4b5a      	ldr	r3, [pc, #360]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d03c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e04:	4b52      	ldr	r3, [pc, #328]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e0a:	4a51      	ldr	r2, [pc, #324]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff f94c 	bl	80010b0 <HAL_GetTick>
 8001e18:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff f948 	bl	80010b0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e254      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001e2e:	4b48      	ldr	r3, [pc, #288]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ef      	beq.n	8001e1c <HAL_RCC_OscConfig+0x3a8>
 8001e3c:	e01b      	b.n	8001e76 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3e:	4b44      	ldr	r3, [pc, #272]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e44:	4a42      	ldr	r2, [pc, #264]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f92f 	bl	80010b0 <HAL_GetTick>
 8001e52:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e56:	f7ff f92b 	bl	80010b0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e237      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001e68:	4b39      	ldr	r3, [pc, #228]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ef      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80d2 	beq.w	8002028 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001e84:	4b34      	ldr	r3, [pc, #208]	@ (8001f58 <HAL_RCC_OscConfig+0x4e4>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d118      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001e90:	4b31      	ldr	r3, [pc, #196]	@ (8001f58 <HAL_RCC_OscConfig+0x4e4>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	4a30      	ldr	r2, [pc, #192]	@ (8001f58 <HAL_RCC_OscConfig+0x4e4>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f908 	bl	80010b0 <HAL_GetTick>
 8001ea0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7ff f904 	bl	80010b0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e210      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001eb6:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <HAL_RCC_OscConfig+0x4e4>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x468>
 8001eca:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eda:	e074      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d118      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4a2>
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eea:	4a19      	ldr	r2, [pc, #100]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001efa:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f0a:	4a11      	ldr	r2, [pc, #68]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f14:	e057      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	d11e      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4e8>
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f24:	4a0a      	ldr	r2, [pc, #40]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f34:	4a06      	ldr	r2, [pc, #24]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f3e:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f44:	4a02      	ldr	r2, [pc, #8]	@ (8001f50 <HAL_RCC_OscConfig+0x4dc>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f4e:	e03a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
 8001f50:	44020c00 	.word	0x44020c00
 8001f54:	20000004 	.word	0x20000004
 8001f58:	44020800 	.word	0x44020800
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b85      	cmp	r3, #133	@ 0x85
 8001f62:	d118      	bne.n	8001f96 <HAL_RCC_OscConfig+0x522>
 8001f64:	4ba2      	ldr	r3, [pc, #648]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f6a:	4aa1      	ldr	r2, [pc, #644]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f74:	4b9e      	ldr	r3, [pc, #632]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f7a:	4a9d      	ldr	r2, [pc, #628]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f84:	4b9a      	ldr	r3, [pc, #616]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f8a:	4a99      	ldr	r2, [pc, #612]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f94:	e017      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
 8001f96:	4b96      	ldr	r3, [pc, #600]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f9c:	4a94      	ldr	r2, [pc, #592]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fa6:	4b92      	ldr	r3, [pc, #584]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fac:	4a90      	ldr	r2, [pc, #576]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fb6:	4b8e      	ldr	r3, [pc, #568]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fbc:	4a8c      	ldr	r2, [pc, #560]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff f86f 	bl	80010b0 <HAL_GetTick>
 8001fd2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff f86b 	bl	80010b0 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e175      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fec:	4b80      	ldr	r3, [pc, #512]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8001fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ed      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x562>
 8001ffa:	e015      	b.n	8002028 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f858 	bl	80010b0 <HAL_GetTick>
 8002000:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff f854 	bl	80010b0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e15e      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201a:	4b75      	ldr	r3, [pc, #468]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800201c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ed      	bne.n	8002004 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d036      	beq.n	80020a2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d019      	beq.n	8002070 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800203c:	4b6c      	ldr	r3, [pc, #432]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a6b      	ldr	r2, [pc, #428]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002042:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff f832 	bl	80010b0 <HAL_GetTick>
 800204c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002050:	f7ff f82e 	bl	80010b0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e13a      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002062:	4b63      	ldr	r3, [pc, #396]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x5dc>
 800206e:	e018      	b.n	80020a2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002070:	4b5f      	ldr	r3, [pc, #380]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5e      	ldr	r2, [pc, #376]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800207a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff f818 	bl	80010b0 <HAL_GetTick>
 8002080:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002084:	f7ff f814 	bl	80010b0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e120      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002096:	4b56      	ldr	r3, [pc, #344]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 8115 	beq.w	80022d6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b18      	cmp	r3, #24
 80020b0:	f000 80af 	beq.w	8002212 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	f040 8086 	bne.w	80021ca <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80020be:	4b4c      	ldr	r3, [pc, #304]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4b      	ldr	r2, [pc, #300]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80020c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7fe fff1 	bl	80010b0 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80020d2:	f7fe ffed 	bl	80010b0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0f9      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80020e4:	4b42      	ldr	r3, [pc, #264]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80020f0:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002104:	0212      	lsls	r2, r2, #8
 8002106:	430a      	orrs	r2, r1
 8002108:	4939      	ldr	r1, [pc, #228]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	628b      	str	r3, [r1, #40]	@ 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002112:	3b01      	subs	r3, #1
 8002114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211c:	3b01      	subs	r3, #1
 800211e:	025b      	lsls	r3, r3, #9
 8002120:	b29b      	uxth	r3, r3
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002128:	3b01      	subs	r3, #1
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	3b01      	subs	r3, #1
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800213e:	492c      	ldr	r1, [pc, #176]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002144:	4b2a      	ldr	r3, [pc, #168]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	4a29      	ldr	r2, [pc, #164]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800214a:	f023 0310 	bic.w	r3, r3, #16
 800214e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	4a26      	ldr	r2, [pc, #152]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800215a:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	4a24      	ldr	r2, [pc, #144]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002166:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	f023 020c 	bic.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	491f      	ldr	r1, [pc, #124]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002174:	4313      	orrs	r3, r2
 8002176:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002178:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	f023 0220 	bic.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002184:	491a      	ldr	r1, [pc, #104]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002186:	4313      	orrs	r3, r2
 8002188:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800218c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218e:	4a18      	ldr	r2, [pc, #96]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002196:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a15      	ldr	r2, [pc, #84]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 800219c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe ff85 	bl	80010b0 <HAL_GetTick>
 80021a6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80021aa:	f7fe ff81 	bl	80010b0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e08d      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x736>
 80021c8:	e085      	b.n	80022d6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a08      	ldr	r2, [pc, #32]	@ (80021f0 <HAL_RCC_OscConfig+0x77c>)
 80021d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe ff6b 	bl	80010b0 <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80021de:	f7fe ff67 	bl	80010b0 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d903      	bls.n	80021f4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e073      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
 80021f0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021f4:	4b3a      	ldr	r3, [pc, #232]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002200:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 8002202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002204:	4a36      	ldr	r2, [pc, #216]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 8002206:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	6293      	str	r3, [r2, #40]	@ 0x28
 8002210:	e061      	b.n	80022d6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002212:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002216:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002218:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	2b01      	cmp	r3, #1
 8002224:	d031      	beq.n	800228a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d12a      	bne.n	800228a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d122      	bne.n	800228a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d11a      	bne.n	800228a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0a5b      	lsrs	r3, r3, #9
 8002258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d111      	bne.n	800228a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d108      	bne.n	800228a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	0e1b      	lsrs	r3, r3, #24
 800227c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e024      	b.n	80022d8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 8002290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002292:	08db      	lsrs	r3, r3, #3
 8002294:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800229c:	429a      	cmp	r2, r3
 800229e:	d01a      	beq.n	80022d6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80022a0:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	4a0e      	ldr	r2, [pc, #56]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 80022a6:	f023 0310 	bic.w	r3, r3, #16
 80022aa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe ff00 	bl	80010b0 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80022b2:	bf00      	nop
 80022b4:	f7fe fefc 	bl	80010b0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4293      	cmp	r3, r2
 80022be:	d0f9      	beq.n	80022b4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	4a06      	ldr	r2, [pc, #24]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80022ca:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_RCC_OscConfig+0x86c>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	44020c00 	.word	0x44020c00

080022e4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e19e      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b83      	ldr	r3, [pc, #524]	@ (8002508 <HAL_RCC_ClockConfig+0x224>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b80      	ldr	r3, [pc, #512]	@ (8002508 <HAL_RCC_ClockConfig+0x224>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 020f 	bic.w	r2, r3, #15
 800230e:	497e      	ldr	r1, [pc, #504]	@ (8002508 <HAL_RCC_ClockConfig+0x224>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b7c      	ldr	r3, [pc, #496]	@ (8002508 <HAL_RCC_ClockConfig+0x224>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e186      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	d012      	beq.n	800235a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	4b74      	ldr	r3, [pc, #464]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002342:	429a      	cmp	r2, r3
 8002344:	d909      	bls.n	800235a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002346:	4b71      	ldr	r3, [pc, #452]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	496d      	ldr	r1, [pc, #436]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002356:	4313      	orrs	r3, r2
 8002358:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	4b68      	ldr	r3, [pc, #416]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002374:	429a      	cmp	r2, r3
 8002376:	d909      	bls.n	800238c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002378:	4b64      	ldr	r3, [pc, #400]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	4961      	ldr	r1, [pc, #388]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002388:	4313      	orrs	r3, r2
 800238a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d908      	bls.n	80023ba <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80023a8:	4b58      	ldr	r3, [pc, #352]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4955      	ldr	r1, [pc, #340]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b50      	ldr	r3, [pc, #320]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d908      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80023d6:	4b4d      	ldr	r3, [pc, #308]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	f023 020f 	bic.w	r2, r3, #15
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	494a      	ldr	r1, [pc, #296]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8093 	beq.w	800251c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023fe:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d121      	bne.n	800244e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e113      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002416:	4b3d      	ldr	r3, [pc, #244]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d115      	bne.n	800244e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e107      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0fb      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800243e:	4b33      	ldr	r3, [pc, #204]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0f3      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800244e:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	492c      	ldr	r1, [pc, #176]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fe26 	bl	80010b0 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d112      	bne.n	8002494 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe fe1e 	bl	80010b0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0d7      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 0318 	and.w	r3, r3, #24
 800248e:	2b18      	cmp	r3, #24
 8002490:	d1ee      	bne.n	8002470 <HAL_RCC_ClockConfig+0x18c>
 8002492:	e043      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d112      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800249e:	f7fe fe07 	bl	80010b0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0c0      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b4:	4b15      	ldr	r3, [pc, #84]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	f003 0318 	and.w	r3, r3, #24
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_ClockConfig+0x1ba>
 80024c0:	e02c      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d122      	bne.n	8002510 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80024ca:	e00a      	b.n	80024e2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024cc:	f7fe fdf0 	bl	80010b0 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0a9      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <HAL_RCC_ClockConfig+0x228>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0318 	and.w	r3, r3, #24
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d1ee      	bne.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
 80024ee:	e015      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7fe fdde 	bl	80010b0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d906      	bls.n	8002510 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e097      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000
 800250c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002510:	4b4b      	ldr	r3, [pc, #300]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 0318 	and.w	r3, r3, #24
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e9      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b44      	ldr	r3, [pc, #272]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	429a      	cmp	r2, r3
 8002536:	d208      	bcs.n	800254a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002538:	4b41      	ldr	r3, [pc, #260]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f023 020f 	bic.w	r2, r3, #15
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	493e      	ldr	r1, [pc, #248]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254a:	4b3e      	ldr	r3, [pc, #248]	@ (8002644 <HAL_RCC_ClockConfig+0x360>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d210      	bcs.n	800257a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <HAL_RCC_ClockConfig+0x360>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 020f 	bic.w	r2, r3, #15
 8002560:	4938      	ldr	r1, [pc, #224]	@ (8002644 <HAL_RCC_ClockConfig+0x360>)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <HAL_RCC_ClockConfig+0x360>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e05d      	b.n	8002636 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4b2d      	ldr	r3, [pc, #180]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002592:	429a      	cmp	r2, r3
 8002594:	d208      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002596:	4b2a      	ldr	r3, [pc, #168]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4927      	ldr	r1, [pc, #156]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d012      	beq.n	80025da <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d209      	bcs.n	80025da <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	491a      	ldr	r1, [pc, #104]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d012      	beq.n	800260c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d209      	bcs.n	800260c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80025f8:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	490e      	ldr	r1, [pc, #56]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800260c:	f000 f822 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_RCC_ClockConfig+0x35c>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	490b      	ldr	r1, [pc, #44]	@ (8002648 <HAL_RCC_ClockConfig+0x364>)
 800261c:	5ccb      	ldrb	r3, [r1, r3]
 800261e:	fa22 f303 	lsr.w	r3, r2, r3
 8002622:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <HAL_RCC_ClockConfig+0x368>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002626:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_RCC_ClockConfig+0x36c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fcb6 	bl	8000f9c <HAL_InitTick>
 8002630:	4603      	mov	r3, r0
 8002632:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002634:	7afb      	ldrb	r3, [r7, #11]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	44020c00 	.word	0x44020c00
 8002644:	40022000 	.word	0x40022000
 8002648:	08008f38 	.word	0x08008f38
 800264c:	20000000 	.word	0x20000000
 8002650:	20000004 	.word	0x20000004

08002654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800265a:	4b8c      	ldr	r3, [pc, #560]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0318 	and.w	r3, r3, #24
 8002662:	2b08      	cmp	r3, #8
 8002664:	d102      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002666:	4b8a      	ldr	r3, [pc, #552]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e107      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800266c:	4b87      	ldr	r3, [pc, #540]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 0318 	and.w	r3, r3, #24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d112      	bne.n	800269e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002678:	4b84      	ldr	r3, [pc, #528]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002684:	4b81      	ldr	r3, [pc, #516]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	08db      	lsrs	r3, r3, #3
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	4a81      	ldr	r2, [pc, #516]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x240>)
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e0f1      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002698:	4b7e      	ldr	r3, [pc, #504]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x240>)
 800269a:	61fb      	str	r3, [r7, #28]
 800269c:	e0ee      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269e:	4b7b      	ldr	r3, [pc, #492]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 0318 	and.w	r3, r3, #24
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x244>)
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e0e5      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b0:	4b76      	ldr	r3, [pc, #472]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 0318 	and.w	r3, r3, #24
 80026b8:	2b18      	cmp	r3, #24
 80026ba:	f040 80dd 	bne.w	8002878 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80026be:	4b73      	ldr	r3, [pc, #460]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80026c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80026c8:	4b70      	ldr	r3, [pc, #448]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80026d4:	4b6d      	ldr	r3, [pc, #436]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80026d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80026e0:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80b7 	beq.w	8002872 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d003      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0xbe>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b03      	cmp	r3, #3
 800270e:	d056      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x16a>
 8002710:	e077      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002712:	4b5e      	ldr	r3, [pc, #376]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d02d      	beq.n	800277a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800271e:	4b5b      	ldr	r3, [pc, #364]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	08db      	lsrs	r3, r3, #3
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	4a5a      	ldr	r2, [pc, #360]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x240>)
 800272a:	fa22 f303 	lsr.w	r3, r2, r3
 800272e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002748:	4b50      	ldr	r3, [pc, #320]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 800274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002758:	ed97 6a02 	vldr	s12, [r7, #8]
 800275c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800289c <HAL_RCC_GetSysClockFreq+0x248>
 8002760:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002764:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002768:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800276c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002778:	e065      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002784:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80028a0 <HAL_RCC_GetSysClockFreq+0x24c>
 8002788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278c:	4b3f      	ldr	r3, [pc, #252]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 800278e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800279c:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800289c <HAL_RCC_GetSysClockFreq+0x248>
 80027a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80027ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80027bc:	e043      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	ee07 3a90 	vmov	s15, r3
 80027c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80028a4 <HAL_RCC_GetSysClockFreq+0x250>
 80027cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d0:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e0:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800289c <HAL_RCC_GetSysClockFreq+0x248>
 80027e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80027f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002800:	e021      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	ee07 3a90 	vmov	s15, r3
 8002808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028a8 <HAL_RCC_GetSysClockFreq+0x254>
 8002810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002814:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 8002816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281c:	ee07 3a90 	vmov	s15, r3
 8002820:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002824:	ed97 6a02 	vldr	s12, [r7, #8]
 8002828:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800289c <HAL_RCC_GetSysClockFreq+0x248>
 800282c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002830:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002834:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002838:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002844:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002846:	4b11      	ldr	r3, [pc, #68]	@ (800288c <HAL_RCC_GetSysClockFreq+0x238>)
 8002848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284a:	0a5b      	lsrs	r3, r3, #9
 800284c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002850:	3301      	adds	r3, #1
 8002852:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800285e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800286a:	ee17 3a90 	vmov	r3, s15
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	e004      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e001      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002878:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x240>)
 800287a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800287c:	69fb      	ldr	r3, [r7, #28]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3724      	adds	r7, #36	@ 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	44020c00 	.word	0x44020c00
 8002890:	003d0900 	.word	0x003d0900
 8002894:	03d09000 	.word	0x03d09000
 8002898:	00f42400 	.word	0x00f42400
 800289c:	46000000 	.word	0x46000000
 80028a0:	4c742400 	.word	0x4c742400
 80028a4:	4b742400 	.word	0x4b742400
 80028a8:	4a742400 	.word	0x4a742400

080028ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80028b0:	f7ff fed0 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80028ba:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80028be:	4907      	ldr	r1, [pc, #28]	@ (80028dc <HAL_RCC_GetHCLKFreq+0x30>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80028c2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80028c6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ca:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80028cc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80028ce:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80028d0:	681b      	ldr	r3, [r3, #0]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	44020c00 	.word	0x44020c00
 80028dc:	08008f38 	.word	0x08008f38
 80028e0:	20000000 	.word	0x20000000

080028e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80028e8:	f7ff ffe0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	4904      	ldr	r1, [pc, #16]	@ (800290c <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	44020c00 	.word	0x44020c00
 800290c:	08008f48 	.word	0x08008f48

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002914:	f7ff ffca 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4904      	ldr	r1, [pc, #16]	@ (8002938 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	44020c00 	.word	0x44020c00
 8002938:	08008f48 	.word	0x08008f48

0800293c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002940:	f7ff ffb4 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	0b1b      	lsrs	r3, r3, #12
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	@ (8002964 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	44020c00 	.word	0x44020c00
 8002964:	08008f48 	.word	0x08008f48

08002968 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b0ba      	sub	sp, #232	@ 0xe8
 800296e:	af00      	add	r7, sp, #0
 8002970:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002974:	2300      	movs	r3, #0
 8002976:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800297a:	2300      	movs	r3, #0
 800297c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 800298c:	2500      	movs	r5, #0
 800298e:	ea54 0305 	orrs.w	r3, r4, r5
 8002992:	d00b      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002994:	4bcd      	ldr	r3, [pc, #820]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800299a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800299e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a4:	4ac9      	ldr	r2, [pc, #804]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80029a6:	430b      	orrs	r3, r1
 80029a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f002 0801 	and.w	r8, r2, #1
 80029b8:	f04f 0900 	mov.w	r9, #0
 80029bc:	ea58 0309 	orrs.w	r3, r8, r9
 80029c0:	d042      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80029c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d823      	bhi.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80029cc:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a1d 	.word	0x08002a1d
 80029d8:	080029ed 	.word	0x080029ed
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a1d 	.word	0x08002a1d
 80029e4:	08002a1d 	.word	0x08002a1d
 80029e8:	08002a1d 	.word	0x08002a1d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029f0:	3308      	adds	r3, #8
 80029f2:	4618      	mov	r0, r3
 80029f4:	f003 f90c 	bl	8005c10 <RCCEx_PLL2_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80029fe:	e00e      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a04:	3330      	adds	r3, #48	@ 0x30
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 f99a 	bl	8005d40 <RCCEx_PLL3_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8002a12:	e004      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002a1a:	e000      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002a26:	4ba9      	ldr	r3, [pc, #676]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002a2c:	f023 0107 	bic.w	r1, r3, #7
 8002a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a36:	4aa5      	ldr	r2, [pc, #660]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002a3e:	e003      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a40:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002a44:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f002 0a02 	and.w	sl, r2, #2
 8002a54:	f04f 0b00 	mov.w	fp, #0
 8002a58:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a5c:	f000 8088 	beq.w	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	2b28      	cmp	r3, #40	@ 0x28
 8002a68:	d868      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a70 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a70:	08002b45 	.word	0x08002b45
 8002a74:	08002b3d 	.word	0x08002b3d
 8002a78:	08002b3d 	.word	0x08002b3d
 8002a7c:	08002b3d 	.word	0x08002b3d
 8002a80:	08002b3d 	.word	0x08002b3d
 8002a84:	08002b3d 	.word	0x08002b3d
 8002a88:	08002b3d 	.word	0x08002b3d
 8002a8c:	08002b3d 	.word	0x08002b3d
 8002a90:	08002b15 	.word	0x08002b15
 8002a94:	08002b3d 	.word	0x08002b3d
 8002a98:	08002b3d 	.word	0x08002b3d
 8002a9c:	08002b3d 	.word	0x08002b3d
 8002aa0:	08002b3d 	.word	0x08002b3d
 8002aa4:	08002b3d 	.word	0x08002b3d
 8002aa8:	08002b3d 	.word	0x08002b3d
 8002aac:	08002b3d 	.word	0x08002b3d
 8002ab0:	08002b29 	.word	0x08002b29
 8002ab4:	08002b3d 	.word	0x08002b3d
 8002ab8:	08002b3d 	.word	0x08002b3d
 8002abc:	08002b3d 	.word	0x08002b3d
 8002ac0:	08002b3d 	.word	0x08002b3d
 8002ac4:	08002b3d 	.word	0x08002b3d
 8002ac8:	08002b3d 	.word	0x08002b3d
 8002acc:	08002b3d 	.word	0x08002b3d
 8002ad0:	08002b45 	.word	0x08002b45
 8002ad4:	08002b3d 	.word	0x08002b3d
 8002ad8:	08002b3d 	.word	0x08002b3d
 8002adc:	08002b3d 	.word	0x08002b3d
 8002ae0:	08002b3d 	.word	0x08002b3d
 8002ae4:	08002b3d 	.word	0x08002b3d
 8002ae8:	08002b3d 	.word	0x08002b3d
 8002aec:	08002b3d 	.word	0x08002b3d
 8002af0:	08002b45 	.word	0x08002b45
 8002af4:	08002b3d 	.word	0x08002b3d
 8002af8:	08002b3d 	.word	0x08002b3d
 8002afc:	08002b3d 	.word	0x08002b3d
 8002b00:	08002b3d 	.word	0x08002b3d
 8002b04:	08002b3d 	.word	0x08002b3d
 8002b08:	08002b3d 	.word	0x08002b3d
 8002b0c:	08002b3d 	.word	0x08002b3d
 8002b10:	08002b45 	.word	0x08002b45
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b18:	3308      	adds	r3, #8
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f878 	bl	8005c10 <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002b26:	e00e      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b2c:	3330      	adds	r3, #48	@ 0x30
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 f906 	bl	8005d40 <RCCEx_PLL3_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8002b3a:	e004      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b54:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b60:	430b      	orrs	r3, r1
 8002b62:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b66:	e003      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b68:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002b6c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f002 0304 	and.w	r3, r2, #4
 8002b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	d04e      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b96:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b9a:	d02c      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002b9c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ba0:	d825      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ba6:	d028      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bac:	d81f      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bb0:	d025      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002bb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bb4:	d81b      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002bb6:	2b80      	cmp	r3, #128	@ 0x80
 8002bb8:	d00f      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d817      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01f      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002bc2:	2b40      	cmp	r3, #64	@ 0x40
 8002bc4:	d113      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bca:	3308      	adds	r3, #8
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f003 f81f 	bl	8005c10 <RCCEx_PLL2_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002bd8:	e014      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bde:	3330      	adds	r3, #48	@ 0x30
 8002be0:	4618      	mov	r0, r3
 8002be2:	f003 f8ad 	bl	8005d40 <RCCEx_PLL3_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8002bec:	e00a      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002bf4:	e006      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002bf6:	bf00      	nop
 8002bf8:	e004      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c04:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c12:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c24:	e003      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c26:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002c2a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f002 0308 	and.w	r3, r2, #8
 8002c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	d056      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002c58:	d031      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002c5a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002c5e:	d82a      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c64:	d02d      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c6a:	d824      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002c70:	d029      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002c72:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002c76:	d81e      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7c:	d011      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c82:	d818      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d023      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c8c:	d113      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c92:	3308      	adds	r3, #8
 8002c94:	4618      	mov	r0, r3
 8002c96:	f002 ffbb 	bl	8005c10 <RCCEx_PLL2_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002ca0:	e017      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ca6:	3330      	adds	r3, #48	@ 0x30
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 f849 	bl	8005d40 <RCCEx_PLL3_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8002cb4:	e00d      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002cbc:	e009      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e007      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002cc2:	bf00      	nop
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002cc6:	bf00      	nop
 8002cc8:	e003      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002cca:	bf00      	nop
 8002ccc:	44020c00 	.word	0x44020c00
        break;
 8002cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002cda:	4bb9      	ldr	r3, [pc, #740]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ce0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8002ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cea:	4ab5      	ldr	r2, [pc, #724]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002cec:	430b      	orrs	r3, r1
 8002cee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002cf2:	e003      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002cf8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f002 0310 	and.w	r3, r2, #16
 8002d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002d12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002d16:	460b      	mov	r3, r1
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	d053      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d22:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002d26:	d031      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002d28:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8002d2c:	d82a      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d32:	d02d      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002d34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d38:	d824      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002d3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d3e:	d029      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002d40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d44:	d81e      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d4a:	d011      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d50:	d818      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d020      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5a:	d113      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d60:	3308      	adds	r3, #8
 8002d62:	4618      	mov	r0, r3
 8002d64:	f002 ff54 	bl	8005c10 <RCCEx_PLL2_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002d6e:	e014      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d74:	3330      	adds	r3, #48	@ 0x30
 8002d76:	4618      	mov	r0, r3
 8002d78:	f002 ffe2 	bl	8005d40 <RCCEx_PLL3_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8002d82:	e00a      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002d8a:	e006      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002d8c:	bf00      	nop
 8002d8e:	e004      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002d90:	bf00      	nop
 8002d92:	e002      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002da2:	4b87      	ldr	r3, [pc, #540]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002da8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002db2:	4a83      	ldr	r2, [pc, #524]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002db4:	430b      	orrs	r3, r1
 8002db6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002dc0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f002 0320 	and.w	r3, r2, #32
 8002dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	d053      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002dee:	d031      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002df0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8002df4:	d82a      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002df6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dfa:	d02d      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002e00:	d824      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002e02:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002e06:	d029      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002e08:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8002e0c:	d81e      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e12:	d011      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e18:	d818      	bhi.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e22:	d113      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e28:	3308      	adds	r3, #8
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 fef0 	bl	8005c10 <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002e36:	e014      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e3c:	3330      	adds	r3, #48	@ 0x30
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 ff7e 	bl	8005d40 <RCCEx_PLL3_Config>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002e52:	e006      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002e54:	bf00      	nop
 8002e56:	e004      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002e58:	bf00      	nop
 8002e5a:	e002      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002e5c:	bf00      	nop
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e62:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10c      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002e6a:	4b55      	ldr	r3, [pc, #340]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e70:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8002e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	4a51      	ldr	r2, [pc, #324]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002e88:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ea2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d053      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002eb6:	d031      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002eb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002ebc:	d82a      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ec2:	d02d      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002ec4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ec8:	d824      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002eca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ece:	d029      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ed0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ed4:	d81e      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eda:	d011      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002edc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ee0:	d818      	bhi.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eea:	d113      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 fe8c 	bl	8005c10 <RCCEx_PLL2_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002efe:	e014      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f04:	3330      	adds	r3, #48	@ 0x30
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 ff1a 	bl	8005d40 <RCCEx_PLL3_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002f12:	e00a      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002f1a:	e006      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002f1c:	bf00      	nop
 8002f1e:	e004      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f32:	4b23      	ldr	r3, [pc, #140]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f38:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f42:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f44:	430b      	orrs	r3, r1
 8002f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f4a:	e003      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002f50:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002f6a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	d03d      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002f80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f84:	d814      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f8a:	d017      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x654>
 8002f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f90:	d80e      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002f96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9a:	d109      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fa0:	3330      	adds	r3, #48	@ 0x30
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f002 fecc 	bl	8005d40 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8002fb6:	e006      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002fb8:	bf00      	nop
 8002fba:	e004      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8002fc0:	44020c00 	.word	0x44020c00
        break;
 8002fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002fce:	4b99      	ldr	r3, [pc, #612]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002fd4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fde:	4a95      	ldr	r2, [pc, #596]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8002fe6:	e003      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8002fec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003006:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800300a:	460b      	mov	r3, r1
 800300c:	4313      	orrs	r3, r2
 800300e:	d03b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003016:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800301a:	d01b      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800301c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003020:	d814      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8003022:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003026:	d017      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8003028:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800302c:	d80e      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8003032:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003036:	d109      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800303c:	3330      	adds	r3, #48	@ 0x30
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fe7e 	bl	8005d40 <RCCEx_PLL3_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800304a:	e008      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003054:	bf00      	nop
 8003056:	e002      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800305c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003066:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003068:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800306c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003076:	4a6f      	ldr	r2, [pc, #444]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003078:	430b      	orrs	r3, r1
 800307a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800307e:	e003      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003084:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003088:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800309e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	d03d      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80030a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030b4:	d01b      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x786>
 80030b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030ba:	d814      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80030bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c0:	d017      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80030c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030c6:	d80e      	bhi.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d014      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80030cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030d0:	d109      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d6:	3330      	adds	r3, #48	@ 0x30
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 fe31 	bl	8005d40 <RCCEx_PLL3_Config>
 80030de:	4603      	mov	r3, r0
 80030e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80030e4:	e008      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80030ec:	e004      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80030f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003100:	4b4c      	ldr	r3, [pc, #304]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003106:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800310a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800310e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003112:	4a48      	ldr	r2, [pc, #288]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003114:	430b      	orrs	r3, r1
 8003116:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800311a:	e003      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800311c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003120:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003130:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800313a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800313e:	460b      	mov	r3, r1
 8003140:	4313      	orrs	r3, r2
 8003142:	d035      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800314c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003150:	d015      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003156:	d80e      	bhi.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003160:	d109      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003166:	3330      	adds	r3, #48	@ 0x30
 8003168:	4618      	mov	r0, r3
 800316a:	f002 fde9 	bl	8005d40 <RCCEx_PLL3_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003174:	e006      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800317c:	e002      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8003182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003184:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800318c:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800318e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003192:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319e:	4a25      	ldr	r2, [pc, #148]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80031a6:	e003      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80031ac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80031b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	2100      	movs	r1, #0
 80031ba:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80031be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80031ca:	460b      	mov	r3, r1
 80031cc:	4313      	orrs	r3, r2
 80031ce:	d037      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80031d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031dc:	d015      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031e2:	d80e      	bhi.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80031e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031ec:	d109      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031f2:	3330      	adds	r3, #48	@ 0x30
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 fda3 	bl	8005d40 <RCCEx_PLL3_Config>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8003200:	e006      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800320e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003210:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10f      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800321a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800321e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	4a02      	ldr	r2, [pc, #8]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800322c:	430b      	orrs	r3, r1
 800322e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003232:	e005      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8003234:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800323c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	2100      	movs	r1, #0
 800324a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800324c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003250:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003252:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003256:	460b      	mov	r3, r1
 8003258:	4313      	orrs	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800325c:	4bb8      	ldr	r3, [pc, #736]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4ab7      	ldr	r2, [pc, #732]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003262:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003266:	61d3      	str	r3, [r2, #28]
 8003268:	4bb5      	ldr	r3, [pc, #724]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800326a:	69d9      	ldr	r1, [r3, #28]
 800326c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003270:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003274:	4ab2      	ldr	r2, [pc, #712]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003276:	430b      	orrs	r3, r1
 8003278:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800327a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003286:	673b      	str	r3, [r7, #112]	@ 0x70
 8003288:	2300      	movs	r3, #0
 800328a:	677b      	str	r3, [r7, #116]	@ 0x74
 800328c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003290:	460b      	mov	r3, r1
 8003292:	4313      	orrs	r3, r2
 8003294:	d055      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800329e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80032a2:	d031      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80032a4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80032a8:	d82a      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80032aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ae:	d02d      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80032b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b4:	d824      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80032b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ba:	d029      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80032bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c0:	d81e      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80032c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c6:	d011      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x984>
 80032c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032cc:	d818      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d020      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d6:	d113      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032dc:	3308      	adds	r3, #8
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 fc96 	bl	8005c10 <RCCEx_PLL2_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80032ea:	e014      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032f0:	3330      	adds	r3, #48	@ 0x30
 80032f2:	4618      	mov	r0, r3
 80032f4:	f002 fd24 	bl	8005d40 <RCCEx_PLL3_Config>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80032fe:	e00a      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003306:	e006      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003308:	bf00      	nop
 800330a:	e004      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800330c:	bf00      	nop
 800330e:	e002      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8003314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003316:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800331e:	4b88      	ldr	r3, [pc, #544]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003320:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003324:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003330:	4a83      	ldr	r2, [pc, #524]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8003332:	430b      	orrs	r3, r1
 8003334:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003338:	e003      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800333e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800334e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003350:	2300      	movs	r3, #0
 8003352:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003354:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003358:	460b      	mov	r3, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	d055      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800335e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800336a:	d031      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 800336c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003370:	d82a      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003376:	d02d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8003378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800337c:	d824      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800337e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003382:	d029      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003384:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003388:	d81e      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800338a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338e:	d011      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003394:	d818      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d020      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339e:	d113      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033a4:	3308      	adds	r3, #8
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fc32 	bl	8005c10 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80033b2:	e014      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033b8:	3330      	adds	r3, #48	@ 0x30
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 fcc0 	bl	8005d40 <RCCEx_PLL3_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80033c6:	e00a      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80033ce:	e006      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80033d0:	bf00      	nop
 80033d2:	e004      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80033d4:	bf00      	nop
 80033d6:	e002      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80033d8:	bf00      	nop
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80033dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80033e6:	4b56      	ldr	r3, [pc, #344]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80033e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033ec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80033f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	4a51      	ldr	r2, [pc, #324]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80033fa:	430b      	orrs	r3, r1
 80033fc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003400:	e003      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003402:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003406:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800340a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003416:	663b      	str	r3, [r7, #96]	@ 0x60
 8003418:	2300      	movs	r3, #0
 800341a:	667b      	str	r3, [r7, #100]	@ 0x64
 800341c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003420:	460b      	mov	r3, r1
 8003422:	4313      	orrs	r3, r2
 8003424:	d032      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800342a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800342e:	2b05      	cmp	r3, #5
 8003430:	d80f      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8003432:	2b03      	cmp	r3, #3
 8003434:	d211      	bcs.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003436:	2b01      	cmp	r3, #1
 8003438:	d911      	bls.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800343a:	2b02      	cmp	r3, #2
 800343c:	d109      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800343e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003442:	3308      	adds	r3, #8
 8003444:	4618      	mov	r0, r3
 8003446:	f002 fbe3 	bl	8005c10 <RCCEx_PLL2_Config>
 800344a:	4603      	mov	r3, r0
 800344c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003450:	e006      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003458:	e002      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800345a:	bf00      	nop
 800345c:	e000      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800345e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003460:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003468:	4b35      	ldr	r3, [pc, #212]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800346a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800346e:	f023 0107 	bic.w	r1, r3, #7
 8003472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800347a:	4a31      	ldr	r2, [pc, #196]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800347c:	430b      	orrs	r3, r1
 800347e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003488:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800348c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	2100      	movs	r1, #0
 8003496:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800349e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80034a2:	460b      	mov	r3, r1
 80034a4:	4313      	orrs	r3, r2
 80034a6:	d024      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80034a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d005      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80034be:	e002      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80034c0:	bf00      	nop
 80034c2:	e000      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80034c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10d      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80034ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80034d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034d4:	f023 0108 	bic.w	r1, r3, #8
 80034d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034e0:	4a17      	ldr	r2, [pc, #92]	@ (8003540 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80034e2:	430b      	orrs	r3, r1
 80034e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80034e8:	e003      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80034ee:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fa:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003500:	2300      	movs	r3, #0
 8003502:	657b      	str	r3, [r7, #84]	@ 0x54
 8003504:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003508:	460b      	mov	r3, r1
 800350a:	4313      	orrs	r3, r2
 800350c:	f000 80b9 	beq.w	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003510:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800351c:	f7fd fdc8 	bl	80010b0 <HAL_GetTick>
 8003520:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003524:	e010      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003526:	f7fd fdc3 	bl	80010b0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d908      	bls.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800353c:	e00a      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800353e:	bf00      	nop
 8003540:	44020c00 	.word	0x44020c00
 8003544:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003548:	4bba      	ldr	r3, [pc, #744]	@ (8003834 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0e8      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8003554:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 808e 	bne.w	800367a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800355e:	4bb6      	ldr	r3, [pc, #728]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003568:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d023      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003578:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003580:	4293      	cmp	r3, r2
 8003582:	d01b      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003584:	4bac      	ldr	r3, [pc, #688]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800358a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800358e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003592:	4ba9      	ldr	r3, [pc, #676]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003598:	4aa7      	ldr	r2, [pc, #668]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035a2:	4ba5      	ldr	r3, [pc, #660]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035a8:	4aa3      	ldr	r2, [pc, #652]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035b2:	4aa1      	ldr	r2, [pc, #644]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d019      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fd fd72 	bl	80010b0 <HAL_GetTick>
 80035cc:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d0:	e00d      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d2:	f7fd fd6d 	bl	80010b0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d903      	bls.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80035ec:	e006      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ee:	4b92      	ldr	r3, [pc, #584]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80035f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ea      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80035fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d135      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003608:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800360c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003610:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003614:	d110      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8003616:	4b88      	ldr	r3, [pc, #544]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800361e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003622:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800362c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003630:	4a81      	ldr	r2, [pc, #516]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003632:	430b      	orrs	r3, r1
 8003634:	61d3      	str	r3, [r2, #28]
 8003636:	e005      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003638:	4b7f      	ldr	r3, [pc, #508]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	4a7e      	ldr	r2, [pc, #504]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800363e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003642:	61d3      	str	r3, [r2, #28]
 8003644:	4b7c      	ldr	r3, [pc, #496]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800364a:	4a7b      	ldr	r2, [pc, #492]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800364c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003654:	4b78      	ldr	r3, [pc, #480]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003656:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800365a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800365e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	4a74      	ldr	r2, [pc, #464]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8003668:	430b      	orrs	r3, r1
 800366a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003670:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003674:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800367e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003690:	2300      	movs	r3, #0
 8003692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003694:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003698:	460b      	mov	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	d035      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800369e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a6:	2b30      	cmp	r3, #48	@ 0x30
 80036a8:	d014      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80036aa:	2b30      	cmp	r3, #48	@ 0x30
 80036ac:	d80e      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	d012      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d80a      	bhi.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d106      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036be:	4b5e      	ldr	r3, [pc, #376]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	4a5d      	ldr	r2, [pc, #372]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80036ca:	e008      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80036dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10d      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80036e6:	4b54      	ldr	r3, [pc, #336]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80036f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003706:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800370a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40
 8003718:	2300      	movs	r3, #0
 800371a:	647b      	str	r3, [r7, #68]	@ 0x44
 800371c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d033      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800372a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8003732:	2b40      	cmp	r3, #64	@ 0x40
 8003734:	d007      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003736:	e010      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003738:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	4a3e      	ldr	r2, [pc, #248]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800373e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003742:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003744:	e00d      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374a:	3308      	adds	r3, #8
 800374c:	4618      	mov	r0, r3
 800374e:	f002 fa5f 	bl	8005c10 <RCCEx_PLL2_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800376a:	4b33      	ldr	r3, [pc, #204]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800376c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003770:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8003774:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003778:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800377c:	4a2e      	ldr	r2, [pc, #184]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800378a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800378e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800379a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800379c:	2300      	movs	r3, #0
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037a4:	460b      	mov	r3, r1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	d04c      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80037aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d827      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80037b6:	a201      	add	r2, pc, #4	@ (adr r2, 80037bc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80037b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037bc:	080037d1 	.word	0x080037d1
 80037c0:	080037df 	.word	0x080037df
 80037c4:	080037f3 	.word	0x080037f3
 80037c8:	0800380f 	.word	0x0800380f
 80037cc:	0800380f 	.word	0x0800380f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d0:	4b19      	ldr	r3, [pc, #100]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80037dc:	e018      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037e2:	3308      	adds	r3, #8
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 fa13 	bl	8005c10 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80037f0:	e00e      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037f6:	3330      	adds	r3, #48	@ 0x30
 80037f8:	4618      	mov	r0, r3
 80037fa:	f002 faa1 	bl	8005d40 <RCCEx_PLL3_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003804:	e004      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800380e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003810:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003818:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800381a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800381e:	f023 0107 	bic.w	r1, r3, #7
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003826:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800382a:	4a03      	ldr	r2, [pc, #12]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800382c:	430b      	orrs	r3, r1
 800382e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003832:	e007      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8003834:	44020800 	.word	0x44020800
 8003838:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003840:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003844:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003850:	633b      	str	r3, [r7, #48]	@ 0x30
 8003852:	2300      	movs	r3, #0
 8003854:	637b      	str	r3, [r7, #52]	@ 0x34
 8003856:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800385a:	460b      	mov	r3, r1
 800385c:	4313      	orrs	r3, r2
 800385e:	f000 8081 	beq.w	8003964 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800386a:	2b20      	cmp	r3, #32
 800386c:	d85f      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800386e:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8003870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003874:	080038f9 	.word	0x080038f9
 8003878:	0800392f 	.word	0x0800392f
 800387c:	0800392f 	.word	0x0800392f
 8003880:	0800392f 	.word	0x0800392f
 8003884:	0800392f 	.word	0x0800392f
 8003888:	0800392f 	.word	0x0800392f
 800388c:	0800392f 	.word	0x0800392f
 8003890:	0800392f 	.word	0x0800392f
 8003894:	08003907 	.word	0x08003907
 8003898:	0800392f 	.word	0x0800392f
 800389c:	0800392f 	.word	0x0800392f
 80038a0:	0800392f 	.word	0x0800392f
 80038a4:	0800392f 	.word	0x0800392f
 80038a8:	0800392f 	.word	0x0800392f
 80038ac:	0800392f 	.word	0x0800392f
 80038b0:	0800392f 	.word	0x0800392f
 80038b4:	0800391b 	.word	0x0800391b
 80038b8:	0800392f 	.word	0x0800392f
 80038bc:	0800392f 	.word	0x0800392f
 80038c0:	0800392f 	.word	0x0800392f
 80038c4:	0800392f 	.word	0x0800392f
 80038c8:	0800392f 	.word	0x0800392f
 80038cc:	0800392f 	.word	0x0800392f
 80038d0:	0800392f 	.word	0x0800392f
 80038d4:	08003937 	.word	0x08003937
 80038d8:	0800392f 	.word	0x0800392f
 80038dc:	0800392f 	.word	0x0800392f
 80038e0:	0800392f 	.word	0x0800392f
 80038e4:	0800392f 	.word	0x0800392f
 80038e8:	0800392f 	.word	0x0800392f
 80038ec:	0800392f 	.word	0x0800392f
 80038f0:	0800392f 	.word	0x0800392f
 80038f4:	08003937 	.word	0x08003937
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f8:	4bb9      	ldr	r3, [pc, #740]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	4ab8      	ldr	r2, [pc, #736]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003902:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003904:	e018      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800390a:	3308      	adds	r3, #8
 800390c:	4618      	mov	r0, r3
 800390e:	f002 f97f 	bl	8005c10 <RCCEx_PLL2_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003918:	e00e      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800391a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800391e:	3330      	adds	r3, #48	@ 0x30
 8003920:	4618      	mov	r0, r3
 8003922:	f002 fa0d 	bl	8005d40 <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800392c:	e004      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8003936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003938:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003940:	4ba7      	ldr	r3, [pc, #668]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003946:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800394a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800394e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003952:	4aa3      	ldr	r2, [pc, #652]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003954:	430b      	orrs	r3, r1
 8003956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800395a:	e003      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003960:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003972:	2300      	movs	r3, #0
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800397a:	460b      	mov	r3, r1
 800397c:	4313      	orrs	r3, r2
 800397e:	d04e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398c:	d02e      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800398e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003992:	d827      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003994:	2bc0      	cmp	r3, #192	@ 0xc0
 8003996:	d02b      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8003998:	2bc0      	cmp	r3, #192	@ 0xc0
 800399a:	d823      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800399c:	2b80      	cmp	r3, #128	@ 0x80
 800399e:	d017      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80039a0:	2b80      	cmp	r3, #128	@ 0x80
 80039a2:	d81f      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d007      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80039ac:	e01a      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ae:	4b8c      	ldr	r3, [pc, #560]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	4a8b      	ldr	r2, [pc, #556]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039ba:	e01a      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039c0:	3308      	adds	r3, #8
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 f924 	bl	8005c10 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039ce:	e010      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039d4:	3330      	adds	r3, #48	@ 0x30
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 f9b2 	bl	8005d40 <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80039fa:	4b79      	ldr	r3, [pc, #484]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80039fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a00:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8003a04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a0c:	4974      	ldr	r1, [pc, #464]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003a1a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d055      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003a42:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003a46:	d031      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8003a48:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003a4c:	d82a      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a52:	d02d      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8003a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a58:	d824      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003a5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a5e:	d029      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8003a60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a64:	d81e      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6a:	d011      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a70:	d818      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7a:	d113      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a80:	3308      	adds	r3, #8
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 f8c4 	bl	8005c10 <RCCEx_PLL2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003a8e:	e014      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a94:	3330      	adds	r3, #48	@ 0x30
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 f952 	bl	8005d40 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e00a      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003aaa:	e006      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003aac:	bf00      	nop
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10d      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ac8:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8003acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003ad4:	4942      	ldr	r1, [pc, #264]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003ae2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	2100      	movs	r1, #0
 8003af0:	61b9      	str	r1, [r7, #24]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003afc:	460b      	mov	r3, r1
 8003afe:	4313      	orrs	r3, r2
 8003b00:	d03c      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d81b      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8003b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b14 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8003b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b14:	08003b4f 	.word	0x08003b4f
 8003b18:	08003b25 	.word	0x08003b25
 8003b1c:	08003b33 	.word	0x08003b33
 8003b20:	08003b4f 	.word	0x08003b4f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b2e      	ldr	r3, [pc, #184]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	4a2d      	ldr	r2, [pc, #180]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003b30:	e00e      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b36:	3308      	adds	r3, #8
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f002 f869 	bl	8005c10 <RCCEx_PLL2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003b44:	e004      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003b4c:	e000      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8003b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b50:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10d      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b5e:	f023 0203 	bic.w	r2, r3, #3
 8003b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b6a:	491d      	ldr	r1, [pc, #116]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003b78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	2100      	movs	r1, #0
 8003b86:	6139      	str	r1, [r7, #16]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003b92:	460b      	mov	r3, r1
 8003b94:	4313      	orrs	r3, r2
 8003b96:	d03c      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003baa:	d815      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d019      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8003bb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bb4:	d110      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003bc2:	e010      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bc8:	3308      	adds	r3, #8
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f002 f820 	bl	8005c10 <RCCEx_PLL2_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003bd6:	e006      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003bde:	e002      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8003be0:	44020c00 	.word	0x44020c00
        break;
 8003be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10d      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003bee:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c00:	4938      	ldr	r1, [pc, #224]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8003c08:	e003      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c0e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	f003 0310 	and.w	r3, r3, #16
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	d038      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003c36:	2b30      	cmp	r3, #48	@ 0x30
 8003c38:	d01b      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8003c3a:	2b30      	cmp	r3, #48	@ 0x30
 8003c3c:	d815      	bhi.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d002      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d007      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8003c46:	e010      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c48:	4b26      	ldr	r3, [pc, #152]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c52:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c54:	e00e      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c5a:	3330      	adds	r3, #48	@ 0x30
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 f86f 	bl	8005d40 <RCCEx_PLL3_Config>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8003c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10d      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003c7c:	4b19      	ldr	r3, [pc, #100]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003c7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c82:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003c8e:	4915      	ldr	r1, [pc, #84]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8003c96:	e003      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003c9c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ca0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6039      	str	r1, [r7, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	d00c      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003cbc:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003cbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cc2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003cce:	4905      	ldr	r1, [pc, #20]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8003cd6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	37e8      	adds	r7, #232	@ 0xe8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce4:	44020c00 	.word	0x44020c00

08003ce8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08b      	sub	sp, #44	@ 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003cf0:	4bae      	ldr	r3, [pc, #696]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003cfa:	4bac      	ldr	r3, [pc, #688]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003d04:	4ba9      	ldr	r3, [pc, #676]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d0e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003d10:	4ba6      	ldr	r3, [pc, #664]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003d1c:	4ba3      	ldr	r3, [pc, #652]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	08db      	lsrs	r3, r3, #3
 8003d22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d34:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8126 	beq.w	8003f8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d053      	beq.n	8003dee <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d86f      	bhi.n	8003e2c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d003      	beq.n	8003d5a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d02b      	beq.n	8003db0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8003d58:	e068      	b.n	8003e2c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d5a:	4b94      	ldr	r3, [pc, #592]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	08db      	lsrs	r3, r3, #3
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	4a92      	ldr	r2, [pc, #584]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003d66:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	ee07 3a90 	vmov	s15, r3
 8003d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003d92:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003dae:	e068      	b.n	8003e82 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8003fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	ee07 3a90 	vmov	s15, r3
 8003dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dcc:	ed97 6a04 	vldr	s12, [r7, #16]
 8003dd0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003dec:	e049      	b.n	8003e82 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003fbc <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8003dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	ee07 3a90 	vmov	s15, r3
 8003e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e0e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8003e2a:	e02a      	b.n	8003e82 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	08db      	lsrs	r3, r3, #3
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	4a5e      	ldr	r2, [pc, #376]	@ (8003fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e60:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e64:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8003fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8003e80:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e82:	4b4a      	ldr	r3, [pc, #296]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e8e:	d121      	bne.n	8003ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003e90:	4b46      	ldr	r3, [pc, #280]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d017      	beq.n	8003ecc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003e9c:	4b43      	ldr	r3, [pc, #268]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea0:	0a5b      	lsrs	r3, r3, #9
 8003ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea6:	ee07 3a90 	vmov	s15, r3
 8003eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003eae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003eb6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e006      	b.n	8003eda <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	e002      	b.n	8003eda <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003eda:	4b34      	ldr	r3, [pc, #208]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ee6:	d121      	bne.n	8003f2c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003ee8:	4b30      	ldr	r3, [pc, #192]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d017      	beq.n	8003f24 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003f0e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f1a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e006      	b.n	8003f32 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f32:	4b1e      	ldr	r3, [pc, #120]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f3e:	d121      	bne.n	8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8003f40:	4b1a      	ldr	r3, [pc, #104]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003f4c:	4b17      	ldr	r3, [pc, #92]	@ (8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	0e1b      	lsrs	r3, r3, #24
 8003f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003f66:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8003f7a:	e010      	b.n	8003f9e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	e00c      	b.n	8003f9e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	e008      	b.n	8003f9e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
}
 8003f9e:	bf00      	nop
 8003fa0:	372c      	adds	r7, #44	@ 0x2c
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	44020c00 	.word	0x44020c00
 8003fb0:	03d09000 	.word	0x03d09000
 8003fb4:	46000000 	.word	0x46000000
 8003fb8:	4a742400 	.word	0x4a742400
 8003fbc:	4b742400 	.word	0x4b742400

08003fc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b08b      	sub	sp, #44	@ 0x2c
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003fc8:	4bae      	ldr	r3, [pc, #696]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8003fd2:	4bac      	ldr	r3, [pc, #688]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8003fdc:	4ba9      	ldr	r3, [pc, #676]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8003fe8:	4ba6      	ldr	r3, [pc, #664]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003ff4:	4ba3      	ldr	r3, [pc, #652]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8126 	beq.w	8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d053      	beq.n	80040c6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d86f      	bhi.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d003      	beq.n	8004032 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d02b      	beq.n	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8004030:	e068      	b.n	8004104 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004032:	4b94      	ldr	r3, [pc, #592]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	08db      	lsrs	r3, r3, #3
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	4a92      	ldr	r2, [pc, #584]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800403e:	fa22 f303 	lsr.w	r3, r2, r3
 8004042:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a04 	vldr	s12, [r7, #16]
 800406a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004086:	e068      	b.n	800415a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80040a8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80040ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80040c4:	e049      	b.n	800415a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	ee07 3a90 	vmov	s15, r3
 80040cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004294 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80040d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80040e6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004102:	e02a      	b.n	800415a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004104:	4b5f      	ldr	r3, [pc, #380]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	4a5e      	ldr	r2, [pc, #376]	@ (8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	ee07 3a90 	vmov	s15, r3
 800411c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	ee07 3a90 	vmov	s15, r3
 8004134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004138:	ed97 6a04 	vldr	s12, [r7, #16]
 800413c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004148:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800414c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004154:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004158:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800415a:	4b4a      	ldr	r3, [pc, #296]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004162:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004166:	d121      	bne.n	80041ac <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004168:	4b46      	ldr	r3, [pc, #280]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004174:	4b43      	ldr	r3, [pc, #268]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	0a5b      	lsrs	r3, r3, #9
 800417a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800418a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800418e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800419a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80041b2:	4b34      	ldr	r3, [pc, #208]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041be:	d121      	bne.n	8004204 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80041c0:	4b30      	ldr	r3, [pc, #192]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80041cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80041de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80041e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	e006      	b.n	800420a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	e002      	b.n	800420a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800420a:	4b1e      	ldr	r3, [pc, #120]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004216:	d121      	bne.n	800425c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004218:	4b1a      	ldr	r3, [pc, #104]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004224:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004228:	0e1b      	lsrs	r3, r3, #24
 800422a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800423a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800423e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004252:	e010      	b.n	8004276 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	e00c      	b.n	8004276 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
}
 8004262:	e008      	b.n	8004276 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	372c      	adds	r7, #44	@ 0x2c
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	44020c00 	.word	0x44020c00
 8004288:	03d09000 	.word	0x03d09000
 800428c:	46000000 	.word	0x46000000
 8004290:	4a742400 	.word	0x4a742400
 8004294:	4b742400 	.word	0x4b742400

08004298 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004298:	b480      	push	{r7}
 800429a:	b08b      	sub	sp, #44	@ 0x2c
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80042a0:	4bae      	ldr	r3, [pc, #696]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80042aa:	4bac      	ldr	r3, [pc, #688]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80042b4:	4ba9      	ldr	r3, [pc, #676]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042be:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80042c0:	4ba6      	ldr	r3, [pc, #664]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80042cc:	4ba3      	ldr	r3, [pc, #652]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80042ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d0:	08db      	lsrs	r3, r3, #3
 80042d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8126 	beq.w	800453c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d053      	beq.n	800439e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d86f      	bhi.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d02b      	beq.n	8004360 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8004308:	e068      	b.n	80043dc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800430a:	4b94      	ldr	r3, [pc, #592]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	4a92      	ldr	r2, [pc, #584]	@ (8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8004316:	fa22 f303 	lsr.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	ee07 3a90 	vmov	s15, r3
 800432c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004342:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800434e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800435e:	e068      	b.n	8004432 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8004568 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	ee07 3a90 	vmov	s15, r3
 8004378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004380:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004384:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004388:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004390:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004398:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800439c:	e049      	b.n	8004432 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	ee07 3a90 	vmov	s15, r3
 80043a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800456c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80043ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	ee07 3a90 	vmov	s15, r3
 80043b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80043be:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80043c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80043da:	e02a      	b.n	8004432 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043dc:	4b5f      	ldr	r3, [pc, #380]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004410:	ed97 6a04 	vldr	s12, [r7, #16]
 8004414:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004564 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004420:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004430:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004432:	4b4a      	ldr	r3, [pc, #296]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800443a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800443e:	d121      	bne.n	8004484 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004440:	4b46      	ldr	r3, [pc, #280]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800444c:	4b43      	ldr	r3, [pc, #268]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800444e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004450:	0a5b      	lsrs	r3, r3, #9
 8004452:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800445e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004462:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004466:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800446a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004472:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	e006      	b.n	800448a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e002      	b.n	800448a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800448a:	4b34      	ldr	r3, [pc, #208]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004496:	d121      	bne.n	80044dc <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8004498:	4b30      	ldr	r3, [pc, #192]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d017      	beq.n	80044d4 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80044a4:	4b2d      	ldr	r3, [pc, #180]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80044a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80044b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044ba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80044be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80044c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ca:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	e006      	b.n	80044e2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	e002      	b.n	80044e2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80044e2:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ee:	d121      	bne.n	8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80044f0:	4b1a      	ldr	r3, [pc, #104]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d017      	beq.n	800452c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80044fc:	4b17      	ldr	r3, [pc, #92]	@ (800455c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80044fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004500:	0e1b      	lsrs	r3, r3, #24
 8004502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800450e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004512:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004516:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800451a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004522:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800452a:	e010      	b.n	800454e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	609a      	str	r2, [r3, #8]
}
 8004532:	e00c      	b.n	800454e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	e008      	b.n	800454e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	609a      	str	r2, [r3, #8]
}
 800454e:	bf00      	nop
 8004550:	372c      	adds	r7, #44	@ 0x2c
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	44020c00 	.word	0x44020c00
 8004560:	03d09000 	.word	0x03d09000
 8004564:	46000000 	.word	0x46000000
 8004568:	4a742400 	.word	0x4a742400
 800456c:	4b742400 	.word	0x4b742400

08004570 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004570:	b590      	push	{r4, r7, lr}
 8004572:	b08f      	sub	sp, #60	@ 0x3c
 8004574:	af00      	add	r7, sp, #0
 8004576:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800457a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800457e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8004582:	4321      	orrs	r1, r4
 8004584:	d150      	bne.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004586:	4b26      	ldr	r3, [pc, #152]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800458c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004592:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d108      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a6:	d104      	bne.n	80045b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80045a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ae:	f001 bb20 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80045b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045c0:	d108      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045c8:	d104      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80045ca:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d0:	f001 bb0f 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80045d4:	4b12      	ldr	r3, [pc, #72]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045e0:	d119      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045e8:	d115      	bne.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80045f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045f6:	d30a      	bcc.n	800460e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80045f8:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004602:	4a08      	ldr	r2, [pc, #32]	@ (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800460a:	f001 baf2 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
      }
      else
      {
        frequency = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004612:	f001 baee 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	637b      	str	r3, [r7, #52]	@ 0x34
 800461a:	f001 baea 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 800461e:	bf00      	nop
 8004620:	44020c00 	.word	0x44020c00
 8004624:	00f42400 	.word	0x00f42400
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800462c:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
 8004630:	ea50 0104 	orrs.w	r1, r0, r4
 8004634:	f000 8615 	beq.w	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
 8004638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800463c:	2801      	cmp	r0, #1
 800463e:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
 8004642:	f081 82d3 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800464a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800464e:	ea50 0104 	orrs.w	r1, r0, r4
 8004652:	f000 84d8 	beq.w	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8004656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800465a:	2801      	cmp	r0, #1
 800465c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8004660:	f081 82c4 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004668:	f1a1 0410 	sub.w	r4, r1, #16
 800466c:	ea50 0104 	orrs.w	r1, r0, r4
 8004670:	f001 8288 	beq.w	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>
 8004674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004678:	2801      	cmp	r0, #1
 800467a:	f171 0110 	sbcs.w	r1, r1, #16
 800467e:	f081 82b5 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004686:	f1a1 0408 	sub.w	r4, r1, #8
 800468a:	ea50 0104 	orrs.w	r1, r0, r4
 800468e:	f001 81fe 	beq.w	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 8004692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004696:	2801      	cmp	r0, #1
 8004698:	f171 0108 	sbcs.w	r1, r1, #8
 800469c:	f081 82a6 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046a4:	1f0c      	subs	r4, r1, #4
 80046a6:	ea50 0104 	orrs.w	r1, r0, r4
 80046aa:	f000 8753 	beq.w	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
 80046ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046b2:	2801      	cmp	r0, #1
 80046b4:	f171 0104 	sbcs.w	r1, r1, #4
 80046b8:	f081 8298 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046c0:	1e8c      	subs	r4, r1, #2
 80046c2:	ea50 0104 	orrs.w	r1, r0, r4
 80046c6:	f001 8173 	beq.w	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1440>
 80046ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ce:	2801      	cmp	r0, #1
 80046d0:	f171 0102 	sbcs.w	r1, r1, #2
 80046d4:	f081 828a 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046dc:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80046e0:	4321      	orrs	r1, r4
 80046e2:	f001 80fe 	beq.w	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80046e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046ea:	4ccb      	ldr	r4, [pc, #812]	@ (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 80046ec:	42a0      	cmp	r0, r4
 80046ee:	f171 0100 	sbcs.w	r1, r1, #0
 80046f2:	f081 827b 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80046f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046fa:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80046fe:	4321      	orrs	r1, r4
 8004700:	f001 8076 	beq.w	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>
 8004704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004708:	4cc4      	ldr	r4, [pc, #784]	@ (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 800470a:	42a0      	cmp	r0, r4
 800470c:	f171 0100 	sbcs.w	r1, r1, #0
 8004710:	f081 826c 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004714:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004718:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800471c:	4321      	orrs	r1, r4
 800471e:	f000 87b5 	beq.w	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x111c>
 8004722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004726:	4cbe      	ldr	r4, [pc, #760]	@ (8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>)
 8004728:	42a0      	cmp	r0, r4
 800472a:	f171 0100 	sbcs.w	r1, r1, #0
 800472e:	f081 825d 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004732:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004736:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800473a:	4321      	orrs	r1, r4
 800473c:	f000 8738 	beq.w	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8004740:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004744:	4cb7      	ldr	r4, [pc, #732]	@ (8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>)
 8004746:	42a0      	cmp	r0, r4
 8004748:	f171 0100 	sbcs.w	r1, r1, #0
 800474c:	f081 824e 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004754:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8004758:	4321      	orrs	r1, r4
 800475a:	f001 81cd 	beq.w	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1588>
 800475e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004762:	4cb1      	ldr	r4, [pc, #708]	@ (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>)
 8004764:	42a0      	cmp	r0, r4
 8004766:	f171 0100 	sbcs.w	r1, r1, #0
 800476a:	f081 823f 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800476e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004772:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8004776:	4321      	orrs	r1, r4
 8004778:	f000 80d9 	beq.w	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800477c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004780:	4caa      	ldr	r4, [pc, #680]	@ (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>)
 8004782:	42a0      	cmp	r0, r4
 8004784:	f171 0100 	sbcs.w	r1, r1, #0
 8004788:	f081 8230 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800478c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004790:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8004794:	4321      	orrs	r1, r4
 8004796:	f000 83da 	beq.w	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800479a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800479e:	4ca4      	ldr	r4, [pc, #656]	@ (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>)
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	f171 0100 	sbcs.w	r1, r1, #0
 80047a6:	f081 8221 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80047aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ae:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80047b2:	4321      	orrs	r1, r4
 80047b4:	f000 8627 	beq.w	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 80047b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047bc:	4c9d      	ldr	r4, [pc, #628]	@ (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>)
 80047be:	42a0      	cmp	r0, r4
 80047c0:	f171 0100 	sbcs.w	r1, r1, #0
 80047c4:	f081 8212 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80047c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047cc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80047d0:	4321      	orrs	r1, r4
 80047d2:	f000 857a 	beq.w	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80047d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047da:	4c97      	ldr	r4, [pc, #604]	@ (8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x4c8>)
 80047dc:	42a0      	cmp	r0, r4
 80047de:	f171 0100 	sbcs.w	r1, r1, #0
 80047e2:	f081 8203 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 80047e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ea:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80047ee:	4321      	orrs	r1, r4
 80047f0:	f000 84fb 	beq.w	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80047f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047f8:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80047fc:	f171 0100 	sbcs.w	r1, r1, #0
 8004800:	f081 81f4 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004804:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004808:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800480c:	4321      	orrs	r1, r4
 800480e:	f000 84a9 	beq.w	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8004812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004816:	f248 0401 	movw	r4, #32769	@ 0x8001
 800481a:	42a0      	cmp	r0, r4
 800481c:	f171 0100 	sbcs.w	r1, r1, #0
 8004820:	f081 81e4 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004828:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800482c:	4321      	orrs	r1, r4
 800482e:	f000 8456 	beq.w	80050de <HAL_RCCEx_GetPeriphCLKFreq+0xb6e>
 8004832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004836:	f244 0401 	movw	r4, #16385	@ 0x4001
 800483a:	42a0      	cmp	r0, r4
 800483c:	f171 0100 	sbcs.w	r1, r1, #0
 8004840:	f081 81d4 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004848:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800484c:	4321      	orrs	r1, r4
 800484e:	f000 8403 	beq.w	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8004852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004856:	f242 0401 	movw	r4, #8193	@ 0x2001
 800485a:	42a0      	cmp	r0, r4
 800485c:	f171 0100 	sbcs.w	r1, r1, #0
 8004860:	f081 81c4 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004868:	2821      	cmp	r0, #33	@ 0x21
 800486a:	f171 0100 	sbcs.w	r1, r1, #0
 800486e:	d255      	bcs.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8004870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004874:	4301      	orrs	r1, r0
 8004876:	f001 81b9 	beq.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800487a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487e:	1e42      	subs	r2, r0, #1
 8004880:	f141 33ff 	adc.w	r3, r1, #4294967295	@ 0xffffffff
 8004884:	2a20      	cmp	r2, #32
 8004886:	f173 0100 	sbcs.w	r1, r3, #0
 800488a:	f081 81af 	bcs.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 800488e:	2a1f      	cmp	r2, #31
 8004890:	f201 81ac 	bhi.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
 8004894:	a101      	add	r1, pc, #4	@ (adr r1, 800489c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004896:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800489a:	bf00      	nop
 800489c:	08004973 	.word	0x08004973
 80048a0:	08004a71 	.word	0x08004a71
 80048a4:	08005bed 	.word	0x08005bed
 80048a8:	08004b31 	.word	0x08004b31
 80048ac:	08005bed 	.word	0x08005bed
 80048b0:	08005bed 	.word	0x08005bed
 80048b4:	08005bed 	.word	0x08005bed
 80048b8:	08004c01 	.word	0x08004c01
 80048bc:	08005bed 	.word	0x08005bed
 80048c0:	08005bed 	.word	0x08005bed
 80048c4:	08005bed 	.word	0x08005bed
 80048c8:	08005bed 	.word	0x08005bed
 80048cc:	08005bed 	.word	0x08005bed
 80048d0:	08005bed 	.word	0x08005bed
 80048d4:	08005bed 	.word	0x08005bed
 80048d8:	08004ce5 	.word	0x08004ce5
 80048dc:	08005bed 	.word	0x08005bed
 80048e0:	08005bed 	.word	0x08005bed
 80048e4:	08005bed 	.word	0x08005bed
 80048e8:	08005bed 	.word	0x08005bed
 80048ec:	08005bed 	.word	0x08005bed
 80048f0:	08005bed 	.word	0x08005bed
 80048f4:	08005bed 	.word	0x08005bed
 80048f8:	08005bed 	.word	0x08005bed
 80048fc:	08005bed 	.word	0x08005bed
 8004900:	08005bed 	.word	0x08005bed
 8004904:	08005bed 	.word	0x08005bed
 8004908:	08005bed 	.word	0x08005bed
 800490c:	08005bed 	.word	0x08005bed
 8004910:	08005bed 	.word	0x08005bed
 8004914:	08005bed 	.word	0x08005bed
 8004918:	08004dbb 	.word	0x08004dbb
 800491c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004920:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004924:	430b      	orrs	r3, r1
 8004926:	f000 82b3 	beq.w	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 800492a:	f001 b95f 	b.w	8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x167c>
        break;
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800492e:	4b43      	ldr	r3, [pc, #268]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004930:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	2b00      	cmp	r3, #0
 800493e:	d108      	bne.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004940:	f107 0320 	add.w	r3, r7, #32
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff f9cf 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800494e:	f001 b950 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	2b40      	cmp	r3, #64	@ 0x40
 8004956:	d108      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fb2f 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004966:	f001 b944 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800496e:	f001 b940 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004972:	4b32      	ldr	r3, [pc, #200]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800497e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004984:	f7fd ffc4 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 8004988:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800498a:	f001 b932 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800498e:	4b2b      	ldr	r3, [pc, #172]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800499a:	d10a      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d107      	bne.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049a2:	f107 0314 	add.w	r3, r7, #20
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb0a 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80049b0:	e05c      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049be:	d10a      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff fc64 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d4:	e04a      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80049d6:	4b19      	ldr	r3, [pc, #100]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d10c      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d109      	bne.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80049e8:	4b14      	ldr	r3, [pc, #80]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	08db      	lsrs	r3, r3, #3
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	4a13      	ldr	r2, [pc, #76]	@ (8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>)
 80049f4:	fa22 f303 	lsr.w	r3, r2, r3
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049fa:	e037      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80049fc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a08:	d11e      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d11b      	bne.n	8004a48 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
          frequency = CSI_VALUE;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	@ (8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a14:	e02a      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8004a16:	bf00      	nop
 8004a18:	40000001 	.word	0x40000001
 8004a1c:	20000001 	.word	0x20000001
 8004a20:	10000001 	.word	0x10000001
 8004a24:	08000001 	.word	0x08000001
 8004a28:	04000001 	.word	0x04000001
 8004a2c:	00400001 	.word	0x00400001
 8004a30:	00200001 	.word	0x00200001
 8004a34:	00040001 	.word	0x00040001
 8004a38:	00020001 	.word	0x00020001
 8004a3c:	44020c00 	.word	0x44020c00
 8004a40:	03d09000 	.word	0x03d09000
 8004a44:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004a48:	4ba3      	ldr	r3, [pc, #652]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d106      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8004a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d103      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          frequency = LSE_VALUE;
 8004a5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a62:	e003      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          frequency = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a68:	f001 b8c3 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004a6c:	f001 b8c1 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004a70:	4b99      	ldr	r3, [pc, #612]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7fd ff2f 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004a86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004a88:	f001 b8b3 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004a8c:	4b92      	ldr	r3, [pc, #584]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d107      	bne.n	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fa8b 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aae:	e03d      	b.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	2b10      	cmp	r3, #16
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ab6:	f107 0308 	add.w	r3, r7, #8
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff fbec 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ac4:	f001 b895 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004ac8:	4b83      	ldr	r3, [pc, #524]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d10c      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	2b18      	cmp	r3, #24
 8004ad8:	d109      	bne.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ada:	4b7f      	ldr	r3, [pc, #508]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	08db      	lsrs	r3, r3, #3
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	4a7d      	ldr	r2, [pc, #500]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aec:	e01e      	b.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004aee:	4b7a      	ldr	r3, [pc, #488]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004afa:	d105      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8004afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d102      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = CSI_VALUE;
 8004b02:	4b77      	ldr	r3, [pc, #476]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b06:	e011      	b.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004b08:	4b73      	ldr	r3, [pc, #460]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d106      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8004b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b18:	2b28      	cmp	r3, #40	@ 0x28
 8004b1a:	d103      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
          frequency = LSE_VALUE;
 8004b1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b22:	e003      	b.n	8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
          frequency = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b28:	f001 b863 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004b2c:	f001 b861 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004b30:	4b69      	ldr	r3, [pc, #420]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b36:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8004b3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d104      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004b42:	f7fd fecf 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004b46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004b48:	f001 b853 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8004b4c:	4b62      	ldr	r3, [pc, #392]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b58:	d10a      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	2b40      	cmp	r3, #64	@ 0x40
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fa2b 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6e:	e045      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8004b70:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b7c:	d10a      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2b80      	cmp	r3, #128	@ 0x80
 8004b82:	d107      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fb85 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b92:	e033      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004b94:	4b50      	ldr	r3, [pc, #320]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d10c      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba4:	d109      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ba6:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb8:	e020      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8004bba:	4b47      	ldr	r3, [pc, #284]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bce:	d102      	bne.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          frequency = CSI_VALUE;
 8004bd0:	4b43      	ldr	r3, [pc, #268]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd4:	e012      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004bd6:	4b40      	ldr	r3, [pc, #256]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004bea:	d103      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
          frequency = LSE_VALUE;
 8004bec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf2:	e003      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004bf8:	f000 bffb 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004bfc:	f000 bff9 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004c00:	4b35      	ldr	r3, [pc, #212]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004c02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c06:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8004c0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fd fe67 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004c16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004c18:	f000 bfeb 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8004c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c28:	d10b      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c30:	d107      	bne.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c32:	f107 0314 	add.w	r3, r7, #20
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff f9c2 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c40:	e047      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8004c42:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c4e:	d10b      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c56:	d107      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fb1b 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c66:	e034      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8004c68:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c7a:	d109      	bne.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c7c:	4b16      	ldr	r3, [pc, #88]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	4a15      	ldr	r2, [pc, #84]	@ (8004cdc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8e:	e020      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8004c90:	4b11      	ldr	r3, [pc, #68]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9c:	d106      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca4:	d102      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
          frequency = CSI_VALUE;
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>)
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004caa:	e012      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004cac:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>)
 8004cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d107      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004cc0:	d103      	bne.n	8004cca <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
          frequency = LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cc8:	e003      	b.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          frequency = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004cce:	f000 bf90 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004cd2:	f000 bf8e 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004cd6:	bf00      	nop
 8004cd8:	44020c00 	.word	0x44020c00
 8004cdc:	03d09000 	.word	0x03d09000
 8004ce0:	003d0900 	.word	0x003d0900
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004ce4:	4ba5      	ldr	r3, [pc, #660]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ce6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cea:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cf6:	f7fd fdf5 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004cfa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004cfc:	f000 bf79 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8004d00:	4b9e      	ldr	r3, [pc, #632]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d0c:	d10b      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d14:	d107      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d16:	f107 0314 	add.w	r3, r7, #20
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff f950 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d24:	e047      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8004d26:	4b95      	ldr	r3, [pc, #596]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d32:	d10b      	bne.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff faa9 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4a:	e034      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004d4c:	4b8b      	ldr	r3, [pc, #556]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d5e:	d109      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d60:	4b86      	ldr	r3, [pc, #536]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	4a85      	ldr	r2, [pc, #532]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d72:	e020      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8004d74:	4b81      	ldr	r3, [pc, #516]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d80:	d106      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d88:	d102      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
          frequency = CSI_VALUE;
 8004d8a:	4b7e      	ldr	r3, [pc, #504]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d8e:	e012      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004d90:	4b7a      	ldr	r3, [pc, #488]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d107      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004da4:	d103      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x83e>
          frequency = LSE_VALUE;
 8004da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004db2:	f000 bf1e 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004db6:	f000 bf1c 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8004dba:	4b70      	ldr	r3, [pc, #448]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004dc0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8004dc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004dcc:	f7fd fd8a 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8004dd0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8004dd2:	f000 bf0e 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8004dd6:	4b69      	ldr	r3, [pc, #420]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004de2:	d10b      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dea:	d107      	bne.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dec:	f107 0314 	add.w	r3, r7, #20
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff f8e5 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfa:	e047      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8004dfc:	4b5f      	ldr	r3, [pc, #380]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e08:	d10b      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e10:	d107      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fa3e 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	e034      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8004e22:	4b56      	ldr	r3, [pc, #344]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d10d      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e34:	d109      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e36:	4b51      	ldr	r3, [pc, #324]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	4a4f      	ldr	r2, [pc, #316]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e48:	e020      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8004e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e56:	d106      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e5e:	d102      	bne.n	8004e66 <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = CSI_VALUE;
 8004e60:	4b48      	ldr	r3, [pc, #288]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e64:	e012      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8004e66:	4b45      	ldr	r3, [pc, #276]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d107      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e7a:	d103      	bne.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e82:	e003      	b.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e88:	f000 beb3 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004e8c:	f000 beb1 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004e90:	4b3a      	ldr	r3, [pc, #232]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e96:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004e9a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d104      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8004ea2:	f7fd fd4b 	bl	800293c <HAL_RCC_GetPCLK3Freq>
 8004ea6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ea8:	f000 bea3 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eb2:	d108      	bne.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff f881 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ec2:	f000 be96 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ecc:	d108      	bne.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x970>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff f9e0 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004edc:	f000 be89 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004ee0:	4b26      	ldr	r3, [pc, #152]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d10d      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef2:	d109      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ef4:	4b21      	ldr	r3, [pc, #132]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	4a20      	ldr	r2, [pc, #128]	@ (8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa10>)
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f06:	e020      	b.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8004f08:	4b1c      	ldr	r3, [pc, #112]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f14:	d106      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
          frequency = CSI_VALUE;
 8004f1e:	4b19      	ldr	r3, [pc, #100]	@ (8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>)
 8004f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f22:	e012      	b.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004f24:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d107      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004f38:	d103      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          frequency = LSE_VALUE;
 8004f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          frequency = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f46:	f000 be54 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f4a:	f000 be52 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xa0c>)
 8004f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d104      	bne.n	8004f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8004f60:	f7fd fca4 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8004f64:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8004f66:	f000 be44 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10b      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f70:	f7fd fb70 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8004f74:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8004f76:	f000 be3c 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8004f7a:	bf00      	nop
 8004f7c:	44020c00 	.word	0x44020c00
 8004f80:	03d09000 	.word	0x03d09000
 8004f84:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d108      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f8e:	f107 0314 	add.w	r3, r7, #20
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff f814 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f9c:	f000 be29 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8004fa0:	4b9f      	ldr	r3, [pc, #636]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fac:	d105      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d102      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          frequency = HSE_VALUE;
 8004fb4:	4b9b      	ldr	r3, [pc, #620]	@ (8005224 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>)
 8004fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb8:	e023      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004fba:	4b99      	ldr	r3, [pc, #612]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d109      	bne.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fcc:	4b94      	ldr	r3, [pc, #592]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	08db      	lsrs	r3, r3, #3
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	4a94      	ldr	r2, [pc, #592]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fde:	e010      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fec:	d105      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          frequency = CSI_VALUE;
 8004ff4:	4b8d      	ldr	r3, [pc, #564]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8004ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ff8:	e003      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
          frequency = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004ffe:	f000 bdf8 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005002:	f000 bdf6 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005006:	4b86      	ldr	r3, [pc, #536]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005012:	4b83      	ldr	r3, [pc, #524]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b02      	cmp	r3, #2
 800501e:	d106      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8005020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
        {
          frequency = LSE_VALUE;
 8005026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800502a:	637b      	str	r3, [r7, #52]	@ 0x34
 800502c:	e012      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800502e:	4b7c      	ldr	r3, [pc, #496]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005038:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800503c:	d106      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	2b08      	cmp	r3, #8
 8005042:	d103      	bne.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>
        {
          frequency = LSI_VALUE;
 8005044:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005048:	637b      	str	r3, [r7, #52]	@ 0x34
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005050:	f000 bdcf 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005054:	f000 bdcd 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005058:	4b71      	ldr	r3, [pc, #452]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800505a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800505e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005062:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800506a:	f7fd fc3b 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 800506e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005070:	f000 bdbf 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507a:	d108      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800507c:	f107 0308 	add.w	r3, r7, #8
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f909 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800508a:	f000 bdb2 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800508e:	4b64      	ldr	r3, [pc, #400]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d10d      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050a0:	d109      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	08db      	lsrs	r3, r3, #3
 80050a8:	f003 0303 	and.w	r3, r3, #3
 80050ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050b4:	e011      	b.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80050b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c2:	d106      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050ca:	d102      	bne.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb62>
          frequency = CSI_VALUE;
 80050cc:	4b57      	ldr	r3, [pc, #348]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80050ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d0:	e003      	b.n	80050da <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80050d6:	f000 bd8c 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80050da:	f000 bd8a 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80050de:	4b50      	ldr	r3, [pc, #320]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80050e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80050e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fd fbf8 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 80050f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80050f6:	f000 bd7c 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005100:	d108      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff f8c6 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005110:	f000 bd6f 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005114:	4b42      	ldr	r3, [pc, #264]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d10d      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005126:	d109      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0xbcc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005128:	4b3d      	ldr	r3, [pc, #244]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	08db      	lsrs	r3, r3, #3
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	4a3d      	ldr	r2, [pc, #244]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
 8005138:	637b      	str	r3, [r7, #52]	@ 0x34
 800513a:	e011      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800513c:	4b38      	ldr	r3, [pc, #224]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005144:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005148:	d106      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005150:	d102      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
          frequency = CSI_VALUE;
 8005152:	4b36      	ldr	r3, [pc, #216]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 8005154:	637b      	str	r3, [r7, #52]	@ 0x34
 8005156:	e003      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0xbf0>
          frequency = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800515c:	f000 bd49 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005160:	f000 bd47 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005164:	4b2e      	ldr	r3, [pc, #184]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 8005166:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800516a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800516e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	2b00      	cmp	r3, #0
 8005174:	d104      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005176:	f7fd fbe1 	bl	800293c <HAL_RCC_GetPCLK3Freq>
 800517a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800517c:	f000 bd39 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005186:	d108      	bne.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005188:	f107 0308 	add.w	r3, r7, #8
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff f883 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005196:	f000 bd2c 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800519a:	4b21      	ldr	r3, [pc, #132]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d10d      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051ac:	d109      	bne.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>)
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c0:	e011      	b.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80051c2:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ce:	d106      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051d6:	d102      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
          frequency = CSI_VALUE;
 80051d8:	4b14      	ldr	r3, [pc, #80]	@ (800522c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>)
 80051da:	637b      	str	r3, [r7, #52]	@ 0x34
 80051dc:	e003      	b.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
          frequency = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80051e2:	f000 bd06 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80051e6:	f000 bd04 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>)
 80051ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051f0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fd fb72 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 8005200:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005202:	f000 bcf6 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800520c:	d110      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0xcc0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800520e:	f107 0308 	add.w	r3, r7, #8
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff f840 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800521c:	f000 bce9 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005220:	44020c00 	.word	0x44020c00
 8005224:	00f42400 	.word	0x00f42400
 8005228:	03d09000 	.word	0x03d09000
 800522c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005230:	4ba4      	ldr	r3, [pc, #656]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d10e      	bne.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005242:	d10a      	bne.n	800525a <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005244:	4b9f      	ldr	r3, [pc, #636]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	08db      	lsrs	r3, r3, #3
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	4a9e      	ldr	r2, [pc, #632]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005256:	f000 bccc 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800525e:	f000 bcc8 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005262:	4b98      	ldr	r3, [pc, #608]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005268:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800526c:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800526e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005274:	f7fd fb62 	bl	800293c <HAL_RCC_GetPCLK3Freq>
 8005278:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800527a:	f000 bcba 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL3R)
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005284:	d108      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005286:	f107 0308 	add.w	r3, r7, #8
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff f804 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005294:	f000 bcad 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8005298:	4b8a      	ldr	r3, [pc, #552]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d10e      	bne.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052aa:	d10a      	bne.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052ac:	4b85      	ldr	r3, [pc, #532]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	4a84      	ldr	r2, [pc, #528]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052be:	f000 bc98 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80052c6:	f000 bc94 	b.w	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80052ca:	4b7e      	ldr	r3, [pc, #504]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80052cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052d4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80052dc:	d056      	beq.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xe1c>
 80052de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80052e4:	f200 808b 	bhi.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ee:	d03e      	beq.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	f200 8082 	bhi.w	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005300:	d027      	beq.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005308:	d879      	bhi.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005310:	d017      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xdd2>
 8005312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005318:	d871      	bhi.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
 800531a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005326:	d004      	beq.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xdc2>
 8005328:	e069      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0xe8e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800532a:	f7fd fb07 	bl	800293c <HAL_RCC_GetPCLK3Freq>
 800532e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8005330:	e068      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005332:	f107 0314 	add.w	r3, r7, #20
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fe42 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005340:	e060      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005342:	f107 0308 	add.w	r3, r7, #8
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe ffa6 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005350:	e058      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005352:	4b5c      	ldr	r3, [pc, #368]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d103      	bne.n	8005368 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
            {
              frequency = LSE_VALUE;
 8005360:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005366:	e04d      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800536c:	e04a      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800536e:	4b55      	ldr	r3, [pc, #340]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005378:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800537c:	d103      	bne.n	8005386 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            {
              frequency = LSI_VALUE;
 800537e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005384:	e03e      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
              frequency = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800538a:	e03b      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800538c:	4b4d      	ldr	r3, [pc, #308]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800538e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005392:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005398:	4b4a      	ldr	r3, [pc, #296]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d10c      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
 80053a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053aa:	4b46      	ldr	r3, [pc, #280]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	08db      	lsrs	r3, r3, #3
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	4a44      	ldr	r2, [pc, #272]	@ (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>)
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80053bc:	e01e      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053be:	4b41      	ldr	r3, [pc, #260]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ca:	d106      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053d2:	d102      	bne.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80053d4:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>)
 80053d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053d8:	e010      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053da:	4b3a      	ldr	r3, [pc, #232]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053e6:	d106      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053ee:	d102      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80053f0:	4b37      	ldr	r3, [pc, #220]	@ (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>)
 80053f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f4:	e002      	b.n	80053fc <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80053fa:	e003      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80053fc:	e002      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
          }
          default :
          {
            frequency = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005402:	bf00      	nop
          }
        }
        break;
 8005404:	e3f5      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005406:	4b2f      	ldr	r3, [pc, #188]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005408:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800540c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005410:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005418:	d05f      	beq.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0xf6a>
 800541a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005420:	f200 8094 	bhi.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800542a:	d03f      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005432:	f200 808b 	bhi.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800543c:	d028      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005444:	f200 8082 	bhi.w	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800544e:	d017      	beq.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8005450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005456:	d879      	bhi.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005464:	d004      	beq.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8005466:	e071      	b.n	800554c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005468:	f7fd fa3c 	bl	80028e4 <HAL_RCC_GetPCLK1Freq>
 800546c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800546e:	e070      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005470:	f107 0314 	add.w	r3, r7, #20
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fda3 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800547e:	e068      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4618      	mov	r0, r3
 8005486:	f7fe ff07 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800548e:	e060      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005490:	4b0c      	ldr	r3, [pc, #48]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 8005492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d103      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf36>
            {
              frequency = LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80054a4:	e055      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
              frequency = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054aa:	e052      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80054ac:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>)
 80054ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054ba:	d10b      	bne.n	80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
            {
              frequency = LSI_VALUE;
 80054bc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80054c2:	e046      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 80054c4:	44020c00 	.word	0x44020c00
 80054c8:	03d09000 	.word	0x03d09000
 80054cc:	003d0900 	.word	0x003d0900
 80054d0:	00f42400 	.word	0x00f42400
              frequency = 0;
 80054d4:	2300      	movs	r3, #0
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80054d8:	e03b      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054da:	4bae      	ldr	r3, [pc, #696]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054e0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054e6:	4bab      	ldr	r3, [pc, #684]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054f8:	4ba6      	ldr	r3, [pc, #664]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	08db      	lsrs	r3, r3, #3
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	4aa5      	ldr	r2, [pc, #660]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
 800550a:	e01e      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800550c:	4ba1      	ldr	r3, [pc, #644]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005518:	d106      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005520:	d102      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005522:	4b9e      	ldr	r3, [pc, #632]	@ (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
 8005526:	e010      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005528:	4b9a      	ldr	r3, [pc, #616]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005534:	d106      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8005536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800553c:	d102      	bne.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800553e:	4b98      	ldr	r3, [pc, #608]	@ (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005540:	637b      	str	r3, [r7, #52]	@ 0x34
 8005542:	e002      	b.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005548:	e003      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
 800554a:	e002      	b.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
          }
          default :
          {
            frequency = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005550:	bf00      	nop
          }
        }
        break;
 8005552:	e34e      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005554:	4b8f      	ldr	r3, [pc, #572]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800555a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8005560:	4b8c      	ldr	r3, [pc, #560]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800556c:	d105      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
 800556e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <HAL_RCCEx_GetPeriphCLKFreq+0x100a>
        {
          frequency = HSE_VALUE;
 8005574:	4b8a      	ldr	r3, [pc, #552]	@ (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005578:	e33b      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005580:	d107      	bne.n	8005592 <HAL_RCCEx_GetPeriphCLKFreq+0x1022>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005582:	f107 0320 	add.w	r3, r7, #32
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fbae 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005590:	e32f      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005598:	d107      	bne.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fd0e 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055a8:	e323      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
          frequency = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80055ae:	e320      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80055b0:	4b78      	ldr	r3, [pc, #480]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 80055b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d860      	bhi.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x1114>
 80055c2:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>)
 80055c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c8:	080055dd 	.word	0x080055dd
 80055cc:	080055ed 	.word	0x080055ed
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	08005613 	.word	0x08005613
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055dc:	f107 0320 	add.w	r3, r7, #32
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fb81 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055ea:	e04e      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fce5 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80055fa:	e046      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055fc:	f107 0308 	add.w	r3, r7, #8
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fe49 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800560a:	e03e      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800560c:	4b65      	ldr	r3, [pc, #404]	@ (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800560e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005610:	e03b      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005612:	4b60      	ldr	r3, [pc, #384]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005618:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800561c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800561e:	4b5d      	ldr	r3, [pc, #372]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d10c      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800562a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562c:	2b00      	cmp	r3, #0
 800562e:	d109      	bne.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005630:	4b58      	ldr	r3, [pc, #352]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	08db      	lsrs	r3, r3, #3
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	4a57      	ldr	r2, [pc, #348]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800563c:	fa22 f303 	lsr.w	r3, r2, r3
 8005640:	637b      	str	r3, [r7, #52]	@ 0x34
 8005642:	e01e      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005644:	4b53      	ldr	r3, [pc, #332]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800564c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005650:	d106      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
 8005652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005658:	d102      	bne.n	8005660 <HAL_RCCEx_GetPeriphCLKFreq+0x10f0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800565a:	4b50      	ldr	r3, [pc, #320]	@ (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>)
 800565c:	637b      	str	r3, [r7, #52]	@ 0x34
 800565e:	e010      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005660:	4b4c      	ldr	r3, [pc, #304]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800566c:	d106      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
 800566e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005674:	d102      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005676:	4b4a      	ldr	r3, [pc, #296]	@ (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>)
 8005678:	637b      	str	r3, [r7, #52]	@ 0x34
 800567a:	e002      	b.n	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005680:	e003      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8005682:	e002      	b.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
          }
          default:
          {
            frequency = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005688:	bf00      	nop
          }
        }
        break;
 800568a:	e2b2      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800568c:	4b41      	ldr	r3, [pc, #260]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 800568e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005696:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	2b20      	cmp	r3, #32
 800569c:	f200 80a4 	bhi.w	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
 80056a0:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1138>)
 80056a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a6:	bf00      	nop
 80056a8:	0800572d 	.word	0x0800572d
 80056ac:	080057e9 	.word	0x080057e9
 80056b0:	080057e9 	.word	0x080057e9
 80056b4:	080057e9 	.word	0x080057e9
 80056b8:	080057e9 	.word	0x080057e9
 80056bc:	080057e9 	.word	0x080057e9
 80056c0:	080057e9 	.word	0x080057e9
 80056c4:	080057e9 	.word	0x080057e9
 80056c8:	0800573d 	.word	0x0800573d
 80056cc:	080057e9 	.word	0x080057e9
 80056d0:	080057e9 	.word	0x080057e9
 80056d4:	080057e9 	.word	0x080057e9
 80056d8:	080057e9 	.word	0x080057e9
 80056dc:	080057e9 	.word	0x080057e9
 80056e0:	080057e9 	.word	0x080057e9
 80056e4:	080057e9 	.word	0x080057e9
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	080057e9 	.word	0x080057e9
 80056f0:	080057e9 	.word	0x080057e9
 80056f4:	080057e9 	.word	0x080057e9
 80056f8:	080057e9 	.word	0x080057e9
 80056fc:	080057e9 	.word	0x080057e9
 8005700:	080057e9 	.word	0x080057e9
 8005704:	080057e9 	.word	0x080057e9
 8005708:	0800575d 	.word	0x0800575d
 800570c:	080057e9 	.word	0x080057e9
 8005710:	080057e9 	.word	0x080057e9
 8005714:	080057e9 	.word	0x080057e9
 8005718:	080057e9 	.word	0x080057e9
 800571c:	080057e9 	.word	0x080057e9
 8005720:	080057e9 	.word	0x080057e9
 8005724:	080057e9 	.word	0x080057e9
 8005728:	08005763 	.word	0x08005763
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800572c:	f107 0320 	add.w	r3, r7, #32
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fad9 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800573a:	e058      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800573c:	f107 0314 	add.w	r3, r7, #20
 8005740:	4618      	mov	r0, r3
 8005742:	f7fe fc3d 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800574a:	e050      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	4618      	mov	r0, r3
 8005752:	f7fe fda1 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800575a:	e048      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800575c:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1234>)
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005760:	e045      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005762:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005764:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005768:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800576c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800576e:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d116      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
 800577a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d113      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1238>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005780:	4b04      	ldr	r3, [pc, #16]	@ (8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	4a03      	ldr	r2, [pc, #12]	@ (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>)
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	637b      	str	r3, [r7, #52]	@ 0x34
 8005792:	e028      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8005794:	44020c00 	.word	0x44020c00
 8005798:	03d09000 	.word	0x03d09000
 800579c:	003d0900 	.word	0x003d0900
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	00bb8000 	.word	0x00bb8000
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057a8:	4b95      	ldr	r3, [pc, #596]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057b4:	d106      	bne.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057bc:	d102      	bne.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80057be:	4b91      	ldr	r3, [pc, #580]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80057c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c2:	e010      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057d0:	d106      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057d8:	d102      	bne.n	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80057da:	4b8b      	ldr	r3, [pc, #556]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80057dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80057de:	e002      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80057e4:	e003      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80057e6:	e002      	b.n	80057ee <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
          }
          default:
          {
            frequency = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80057ec:	bf00      	nop
          }
        }
        break;
 80057ee:	e200      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80057f0:	4b83      	ldr	r3, [pc, #524]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80057f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057f6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80057fa:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005802:	d031      	beq.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580a:	d866      	bhi.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005810:	d027      	beq.n	8005862 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	2bc0      	cmp	r3, #192	@ 0xc0
 8005816:	d860      	bhi.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	2b80      	cmp	r3, #128	@ 0x80
 800581c:	d019      	beq.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x12e2>
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	2b80      	cmp	r3, #128	@ 0x80
 8005822:	d85a      	bhi.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x12c2>
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	2b40      	cmp	r3, #64	@ 0x40
 800582e:	d008      	beq.n	8005842 <HAL_RCCEx_GetPeriphCLKFreq+0x12d2>
 8005830:	e053      	b.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x136a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005832:	f107 0320 	add.w	r3, r7, #32
 8005836:	4618      	mov	r0, r3
 8005838:	f7fe fa56 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005840:	e04e      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe fbba 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005850:	e046      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe fd1e 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005860:	e03e      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005862:	4b6a      	ldr	r3, [pc, #424]	@ (8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>)
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005866:	e03b      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005868:	4b65      	ldr	r3, [pc, #404]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800586a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800586e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005874:	4b62      	ldr	r3, [pc, #392]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d10c      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8005880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005886:	4b5e      	ldr	r3, [pc, #376]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	08db      	lsrs	r3, r3, #3
 800588c:	f003 0303 	and.w	r3, r3, #3
 8005890:	4a5f      	ldr	r2, [pc, #380]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005892:	fa22 f303 	lsr.w	r3, r2, r3
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	e01e      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800589a:	4b59      	ldr	r3, [pc, #356]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a6:	d106      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ae:	d102      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80058b0:	4b54      	ldr	r3, [pc, #336]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 80058b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b4:	e010      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058b6:	4b52      	ldr	r3, [pc, #328]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058c2:	d106      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058ca:	d102      	bne.n	80058d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1362>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80058cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d0:	e002      	b.n	80058d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80058d6:	e003      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
 80058d8:	e002      	b.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>
          }
          default:
          {
            frequency = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80058de:	bf00      	nop
          }
        }
        break;
 80058e0:	e187      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80058e2:	4b47      	ldr	r3, [pc, #284]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80058e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058e8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d103      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x138c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fd f80c 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 80058f8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80058fa:	e17a      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80058fc:	4b40      	ldr	r3, [pc, #256]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005904:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005908:	d10b      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800590a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005910:	d107      	bne.n	8005922 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005912:	f107 0314 	add.w	r3, r7, #20
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fb52 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005920:	e045      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8005922:	4b37      	ldr	r3, [pc, #220]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800592a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592e:	d10b      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005936:	d107      	bne.n	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fcab 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	637b      	str	r3, [r7, #52]	@ 0x34
 8005946:	e032      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8005948:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d10d      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800595a:	d109      	bne.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x1400>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800595c:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	4a2a      	ldr	r2, [pc, #168]	@ (8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>)
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	637b      	str	r3, [r7, #52]	@ 0x34
 800596e:	e01e      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8005970:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597c:	d106      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005984:	d102      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x141c>
          frequency = CSI_VALUE;
 8005986:	4b1f      	ldr	r3, [pc, #124]	@ (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1494>)
 8005988:	637b      	str	r3, [r7, #52]	@ 0x34
 800598a:	e010      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800598c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005994:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005998:	d106      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80059a0:	d102      	bne.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
          frequency = HSE_VALUE;
 80059a2:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1498>)
 80059a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059a6:	e002      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
          frequency = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059ac:	e121      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 80059ae:	e120      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80059b0:	4b13      	ldr	r3, [pc, #76]	@ (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>)
 80059b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059b6:	f003 0303 	and.w	r3, r3, #3
 80059ba:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d861      	bhi.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80059c2:	a201      	add	r2, pc, #4	@ (adr r2, 80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1458>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	080059d9 	.word	0x080059d9
 80059cc:	080059e1 	.word	0x080059e1
 80059d0:	080059f1 	.word	0x080059f1
 80059d4:	08005a15 	.word	0x08005a15
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80059d8:	f7fc ff68 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80059dc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80059de:	e055      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059e0:	f107 0320 	add.w	r3, r7, #32
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe f97f 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80059ee:	e04d      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fae3 	bl	8003fc0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80059fe:	e045      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005a00:	44020c00 	.word	0x44020c00
 8005a04:	003d0900 	.word	0x003d0900
 8005a08:	00f42400 	.word	0x00f42400
 8005a0c:	00bb8000 	.word	0x00bb8000
 8005a10:	03d09000 	.word	0x03d09000
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a14:	4b79      	ldr	r3, [pc, #484]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a1a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a20:	4b76      	ldr	r3, [pc, #472]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
 8005a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x14d6>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a32:	4b72      	ldr	r3, [pc, #456]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	4a70      	ldr	r2, [pc, #448]	@ (8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x1690>)
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a44:	e01e      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a46:	4b6d      	ldr	r3, [pc, #436]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a52:	d106      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005a5c:	4b69      	ldr	r3, [pc, #420]	@ (8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1694>)
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a60:	e010      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a62:	4b66      	ldr	r3, [pc, #408]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 8005a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a76:	d102      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005a78:	4b63      	ldr	r3, [pc, #396]	@ (8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>)
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1514>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8005a82:	e003      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005a84:	e002      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
          }
          default:
          {
            frequency = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005a8a:	bf00      	nop
          }
        }
        break;
 8005a8c:	e0b1      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a98:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005a9a:	4b58      	ldr	r3, [pc, #352]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1546>
        {
          frequency = LSE_VALUE;
 8005aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ab4:	e01f      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8005ab6:	4b51      	ldr	r3, [pc, #324]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ac4:	d106      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	2b40      	cmp	r3, #64	@ 0x40
 8005aca:	d103      	bne.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1564>
        {
          frequency = LSI_VALUE;
 8005acc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	e010      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8005ad4:	4b49      	ldr	r3, [pc, #292]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae0:	d106      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	2b80      	cmp	r3, #128	@ 0x80
 8005ae6:	d103      	bne.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1580>
        {
          frequency = CSI_VALUE / 122U;
 8005ae8:	f248 0312 	movw	r3, #32786	@ 0x8012
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aee:	e002      	b.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005af4:	e07d      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005af6:	e07c      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005af8:	4b40      	ldr	r3, [pc, #256]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005afa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005afe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b02:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005b04:	4b3d      	ldr	r3, [pc, #244]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b10:	d105      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d102      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        {
          frequency = HSI48_VALUE;
 8005b18:	4b3c      	ldr	r3, [pc, #240]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b1c:	e031      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005b1e:	4b37      	ldr	r3, [pc, #220]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b2a:	d10a      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d107      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b32:	f107 0320 	add.w	r3, r7, #32
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe f8d6 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b40:	e01f      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005b42:	4b2e      	ldr	r3, [pc, #184]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d103      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = LSE_VALUE;
 8005b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b5c:	e011      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005b5e:	4b27      	ldr	r3, [pc, #156]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b6c:	d106      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	2b30      	cmp	r3, #48	@ 0x30
 8005b72:	d103      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>
        {
          frequency = LSI_VALUE;
 8005b74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7a:	e002      	b.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1612>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8005b80:	e037      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005b82:	e036      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005b84:	4b1d      	ldr	r3, [pc, #116]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005b86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b8a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b8e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1636>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b96:	f107 0320 	add.w	r3, r7, #32
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe f8a4 	bl	8003ce8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005ba4:	e025      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8005ba6:	4b15      	ldr	r3, [pc, #84]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bb2:	d10a      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d107      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x165a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bba:	f107 0308 	add.w	r3, r7, #8
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fb6a 	bl	8004298 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc8:	e00f      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005bca:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x168c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bd6:	d105      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	2b30      	cmp	r3, #48	@ 0x30
 8005bdc:	d102      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1674>
        {
          frequency = HSI48_VALUE;
 8005bde:	4b0b      	ldr	r3, [pc, #44]	@ (8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x169c>)
 8005be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005be2:	e002      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x167a>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8005be8:	e003      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>
 8005bea:	e002      	b.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1682>


      default:
        frequency = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005bf0:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	373c      	adds	r7, #60	@ 0x3c
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd90      	pop	{r4, r7, pc}
 8005bfc:	44020c00 	.word	0x44020c00
 8005c00:	03d09000 	.word	0x03d09000
 8005c04:	003d0900 	.word	0x003d0900
 8005c08:	00f42400 	.word	0x00f42400
 8005c0c:	02dc6c00 	.word	0x02dc6c00

08005c10 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005c18:	4b48      	ldr	r3, [pc, #288]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a47      	ldr	r2, [pc, #284]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005c1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c24:	f7fb fa44 	bl	80010b0 <HAL_GetTick>
 8005c28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c2c:	f7fb fa40 	bl	80010b0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e07a      	b.n	8005d34 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005c4a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6811      	ldr	r1, [r2, #0]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6852      	ldr	r2, [r2, #4]
 8005c5e:	0212      	lsls	r2, r2, #8
 8005c60:	430a      	orrs	r2, r1
 8005c62:	4936      	ldr	r1, [pc, #216]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	025b      	lsls	r3, r3, #9
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	061b      	lsls	r3, r3, #24
 8005c94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c98:	4928      	ldr	r1, [pc, #160]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005c9e:	4b27      	ldr	r3, [pc, #156]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	f023 020c 	bic.w	r2, r3, #12
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	4924      	ldr	r1, [pc, #144]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005cb0:	4b22      	ldr	r3, [pc, #136]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb4:	f023 0220 	bic.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	491f      	ldr	r1, [pc, #124]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	491c      	ldr	r1, [pc, #112]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd4:	4a19      	ldr	r2, [pc, #100]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cd6:	f023 0310 	bic.w	r3, r3, #16
 8005cda:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005cdc:	4b17      	ldr	r3, [pc, #92]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ce4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6a12      	ldr	r2, [r2, #32]
 8005cec:	00d2      	lsls	r2, r2, #3
 8005cee:	4913      	ldr	r1, [pc, #76]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005cf4:	4b11      	ldr	r3, [pc, #68]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	4a10      	ldr	r2, [pc, #64]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005cfa:	f043 0310 	orr.w	r3, r3, #16
 8005cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005d00:	4b0e      	ldr	r3, [pc, #56]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a0d      	ldr	r2, [pc, #52]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005d06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d0c:	f7fb f9d0 	bl	80010b0 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d12:	e008      	b.n	8005d26 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d14:	f7fb f9cc 	bl	80010b0 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e006      	b.n	8005d34 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d26:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <RCCEx_PLL2_Config+0x12c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0

}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	44020c00 	.word	0x44020c00

08005d40 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005d48:	4b48      	ldr	r3, [pc, #288]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a47      	ldr	r2, [pc, #284]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d54:	f7fb f9ac 	bl	80010b0 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d5a:	e008      	b.n	8005d6e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d5c:	f7fb f9a8 	bl	80010b0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e07a      	b.n	8005e64 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d82:	f023 0303 	bic.w	r3, r3, #3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6811      	ldr	r1, [r2, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6852      	ldr	r2, [r2, #4]
 8005d8e:	0212      	lsls	r2, r2, #8
 8005d90:	430a      	orrs	r2, r1
 8005d92:	4936      	ldr	r1, [pc, #216]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	630b      	str	r3, [r1, #48]	@ 0x30
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	025b      	lsls	r3, r3, #9
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	061b      	lsls	r3, r3, #24
 8005dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005dc8:	4928      	ldr	r1, [pc, #160]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005dce:	4b27      	ldr	r3, [pc, #156]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd2:	f023 020c 	bic.w	r2, r3, #12
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	4924      	ldr	r1, [pc, #144]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005de0:	4b22      	ldr	r3, [pc, #136]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de4:	f023 0220 	bic.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	491f      	ldr	r1, [pc, #124]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005df2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	491c      	ldr	r1, [pc, #112]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005e00:	4b1a      	ldr	r3, [pc, #104]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	4a19      	ldr	r2, [pc, #100]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e06:	f023 0310 	bic.w	r3, r3, #16
 8005e0a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005e0c:	4b17      	ldr	r3, [pc, #92]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6a12      	ldr	r2, [r2, #32]
 8005e1c:	00d2      	lsls	r2, r2, #3
 8005e1e:	4913      	ldr	r1, [pc, #76]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005e24:	4b11      	ldr	r3, [pc, #68]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e28:	4a10      	ldr	r2, [pc, #64]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e2a:	f043 0310 	orr.w	r3, r3, #16
 8005e2e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005e30:	4b0e      	ldr	r3, [pc, #56]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a0d      	ldr	r2, [pc, #52]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e3c:	f7fb f938 	bl	80010b0 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e42:	e008      	b.n	8005e56 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e44:	f7fb f934 	bl	80010b0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e006      	b.n	8005e64 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e56:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <RCCEx_PLL3_Config+0x12c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0f0      	beq.n	8005e44 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	44020c00 	.word	0x44020c00

08005e70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	@ 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e075      	b.n	8005f6e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fa fd49 	bl	800092c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f868 	bl	8005f78 <HAL_SD_InitCard>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e05d      	b.n	8005f6e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 faa5 	bl	8006408 <HAL_SD_GetCardStatus>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e052      	b.n	8005f6e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005ec8:	7e3b      	ldrb	r3, [r7, #24]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005ece:	7e7b      	ldrb	r3, [r7, #25]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d10a      	bne.n	8005ef2 <HAL_SD_Init+0x82>
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_SD_Init+0x78>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eee:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ef0:	e00b      	b.n	8005f0a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d104      	bne.n	8005f04 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f00:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f02:	e002      	b.n	8005f0a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fb37 	bl	8006584 <HAL_SD_ConfigWideBusOperation>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e026      	b.n	8005f6e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005f20:	f7fb f8c6 	bl	80010b0 <HAL_GetTick>
 8005f24:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f26:	e011      	b.n	8005f4c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8005f28:	f7fb f8c2 	bl	80010b0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f36:	d109      	bne.n	8005f4c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f3e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e010      	b.n	8005f6e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc35 	bl	80067bc <HAL_SD_GetCardState>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d1e7      	bne.n	8005f28 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	@ 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b08d      	sub	sp, #52	@ 0x34
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  if (hsd->Instance == SDMMC1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a45      	ldr	r2, [pc, #276]	@ (80060b0 <HAL_SD_InitCard+0x138>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d106      	bne.n	8005fac <HAL_SD_InitCard+0x34>
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005f9e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8005fa2:	f04f 0100 	mov.w	r1, #0
 8005fa6:	f7fe fae3 	bl	8004570 <HAL_RCCEx_GetPeriphCLKFreq>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24
  if (hsd->Instance == SDMMC2)
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
  }
#endif /* SDMMC2 */
  if (sdmmc_clk == 0U)
 8005fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d109      	bne.n	8005fc6 <HAL_SD_InitCard+0x4e>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005fc0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e070      	b.n	80060a8 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	0a1b      	lsrs	r3, r3, #8
 8005fca:	4a3a      	ldr	r2, [pc, #232]	@ (80060b4 <HAL_SD_InitCard+0x13c>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681c      	ldr	r4, [r3, #0]
 8005fd8:	466a      	mov	r2, sp
 8005fda:	f107 0318 	add.w	r3, r7, #24
 8005fde:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fe2:	e882 0003 	stmia.w	r2, {r0, r1}
 8005fe6:	f107 030c 	add.w	r3, r7, #12
 8005fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fec:	4620      	mov	r0, r4
 8005fee:	f002 f9db 	bl	80083a8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f002 fa0d 	bl	8008416 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_SD_InitCard+0x96>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006014:	4a28      	ldr	r2, [pc, #160]	@ (80060b8 <HAL_SD_InitCard+0x140>)
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	3301      	adds	r3, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f7fb f852 	bl	80010c8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fcb7 	bl	8006998 <SD_PowerON>
 800602a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e02e      	b.n	80060a8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fbd6 	bl	80067fc <SD_InitCard>
 8006050:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e01b      	b.n	80060a8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006078:	4618      	mov	r0, r3
 800607a:	f002 fa61 	bl	8008540 <SDMMC_CmdBlockLength>
 800607e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00f      	beq.n	80060a6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a0c      	ldr	r2, [pc, #48]	@ (80060bc <HAL_SD_InitCard+0x144>)
 800608c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	431a      	orrs	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	372c      	adds	r7, #44	@ 0x2c
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd90      	pop	{r4, r7, pc}
 80060b0:	46008000 	.word	0x46008000
 80060b4:	014f8b59 	.word	0x014f8b59
 80060b8:	00012110 	.word	0x00012110
 80060bc:	1fe00fff 	.word	0x1fe00fff

080060c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ce:	0f9b      	lsrs	r3, r3, #30
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060da:	0e9b      	lsrs	r3, r3, #26
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ec:	0e1b      	lsrs	r3, r3, #24
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	0c1b      	lsrs	r3, r3, #16
 8006100:	b2da      	uxtb	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	b2da      	uxtb	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006116:	b2da      	uxtb	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006120:	0d1b      	lsrs	r3, r3, #20
 8006122:	b29a      	uxth	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800612c:	0c1b      	lsrs	r3, r3, #16
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	b2da      	uxtb	r2, r3
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613e:	0bdb      	lsrs	r3, r3, #15
 8006140:	b2db      	uxtb	r3, r3
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	b2da      	uxtb	r2, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006150:	0b9b      	lsrs	r3, r3, #14
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	b2da      	uxtb	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006162:	0b5b      	lsrs	r3, r3, #13
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006174:	0b1b      	lsrs	r3, r3, #12
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	b2da      	uxtb	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2200      	movs	r2, #0
 8006186:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618c:	2b00      	cmp	r3, #0
 800618e:	d163      	bne.n	8006258 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006194:	009a      	lsls	r2, r3, #2
 8006196:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80061a0:	0f92      	lsrs	r2, r2, #30
 80061a2:	431a      	orrs	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ac:	0edb      	lsrs	r3, r3, #27
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061be:	0e1b      	lsrs	r3, r3, #24
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d0:	0d5b      	lsrs	r3, r3, #21
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061e2:	0c9b      	lsrs	r3, r3, #18
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f4:	0bdb      	lsrs	r3, r3, #15
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f003 0307 	and.w	r3, r3, #7
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	7e1b      	ldrb	r3, [r3, #24]
 8006210:	b2db      	uxtb	r3, r3
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	3302      	adds	r3, #2
 8006218:	2201      	movs	r2, #1
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006222:	fb03 f202 	mul.w	r2, r3, r2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	7a1b      	ldrb	r3, [r3, #8]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	2201      	movs	r2, #1
 8006236:	409a      	lsls	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006244:	0a52      	lsrs	r2, r2, #9
 8006246:	fb03 f202 	mul.w	r2, r3, r2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006254:	655a      	str	r2, [r3, #84]	@ 0x54
 8006256:	e031      	b.n	80062bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625c:	2b01      	cmp	r3, #1
 800625e:	d11d      	bne.n	800629c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006264:	041b      	lsls	r3, r3, #16
 8006266:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800626e:	0c1b      	lsrs	r3, r3, #16
 8006270:	431a      	orrs	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	3301      	adds	r3, #1
 800627c:	029a      	lsls	r2, r3, #10
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006290:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	655a      	str	r2, [r3, #84]	@ 0x54
 800629a:	e00f      	b.n	80062bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a58      	ldr	r2, [pc, #352]	@ (8006404 <HAL_SD_GetCardCSD+0x344>)
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e09d      	b.n	80063f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c0:	0b9b      	lsrs	r3, r3, #14
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062f4:	0fdb      	lsrs	r3, r3, #31
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006300:	0f5b      	lsrs	r3, r3, #29
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0303 	and.w	r3, r3, #3
 8006308:	b2da      	uxtb	r2, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006312:	0e9b      	lsrs	r3, r3, #26
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006324:	0d9b      	lsrs	r3, r3, #22
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	b2da      	uxtb	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006336:	0d5b      	lsrs	r3, r3, #21
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006352:	0c1b      	lsrs	r3, r3, #16
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	b2da      	uxtb	r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006366:	0bdb      	lsrs	r3, r3, #15
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800637a:	0b9b      	lsrs	r3, r3, #14
 800637c:	b2db      	uxtb	r3, r3
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800638e:	0b5b      	lsrs	r3, r3, #13
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063a2:	0b1b      	lsrs	r3, r3, #12
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063b6:	0a9b      	lsrs	r3, r3, #10
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0303 	and.w	r3, r3, #3
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	1fe00fff 	.word	0x1fe00fff

08006408 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b094      	sub	sp, #80	@ 0x50
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b03      	cmp	r3, #3
 8006422:	d101      	bne.n	8006428 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0a7      	b.n	8006578 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006428:	f107 0308 	add.w	r3, r7, #8
 800642c:	4619      	mov	r1, r3
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fb40 	bl	8006ab4 <SD_SendSDStatus>
 8006434:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006438:	2b00      	cmp	r3, #0
 800643a:	d011      	beq.n	8006460 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a4f      	ldr	r2, [pc, #316]	@ (8006580 <HAL_SD_GetCardStatus+0x178>)
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800645e:	e070      	b.n	8006542 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	099b      	lsrs	r3, r3, #6
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	b2da      	uxtb	r2, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	b2db      	uxtb	r3, r3
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	b2da      	uxtb	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	b29b      	uxth	r3, r3
 8006486:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800648a:	b29a      	uxth	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	0e1b      	lsrs	r3, r3, #24
 8006490:	b29b      	uxth	r3, r3
 8006492:	4313      	orrs	r3, r2
 8006494:	b29a      	uxth	r2, r3
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	061a      	lsls	r2, r3, #24
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80064a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	0a1b      	lsrs	r3, r3, #8
 80064ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	0e1b      	lsrs	r3, r3, #24
 80064b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	0d1b      	lsrs	r3, r3, #20
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	0c1b      	lsrs	r3, r3, #16
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	0a9b      	lsrs	r3, r3, #10
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006504:	b2da      	uxtb	r2, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	b2da      	uxtb	r2, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	0e1b      	lsrs	r3, r3, #24
 800653c:	b2da      	uxtb	r2, r3
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800654a:	4618      	mov	r0, r3
 800654c:	f001 fff8 	bl	8008540 <SDMMC_CmdBlockLength>
 8006550:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a08      	ldr	r2, [pc, #32]	@ (8006580 <HAL_SD_GetCardStatus+0x178>)
 800655e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006564:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8006574:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006578:	4618      	mov	r0, r3
 800657a:	3750      	adds	r7, #80	@ 0x50
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	1fe00fff 	.word	0x1fe00fff

08006584 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b08d      	sub	sp, #52	@ 0x34
 8006588:	af02      	add	r7, sp, #8
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2203      	movs	r2, #3
 8006598:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	2b03      	cmp	r3, #3
 80065a2:	d02e      	beq.n	8006602 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065aa:	d106      	bne.n	80065ba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80065b8:	e029      	b.n	800660e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c0:	d10a      	bne.n	80065d8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fb6e 	bl	8006ca4 <SD_WideBus_Enable>
 80065c8:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80065d6:	e01a      	b.n	800660e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fbab 	bl	8006d3a <SD_WideBus_Disable>
 80065e4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80065f2:	e00c      	b.n	800660e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8006600:	e005      	b.n	800660e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006606:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a63      	ldr	r2, [pc, #396]	@ (80067a8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800661c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006624:	e09e      	b.n	8006764 <HAL_SD_ConfigWideBusOperation+0x1e0>
  }
  else
  {
    if (hsd->Instance == SDMMC1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a60      	ldr	r2, [pc, #384]	@ (80067ac <HAL_SD_ConfigWideBusOperation+0x228>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d107      	bne.n	8006640 <HAL_SD_ConfigWideBusOperation+0xbc>
    {
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006630:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8006634:	f04f 0100 	mov.w	r1, #0
 8006638:	f7fd ff9a 	bl	8004570 <HAL_RCCEx_GetPeriphCLKFreq>
 800663c:	6278      	str	r0, [r7, #36]	@ 0x24
 800663e:	e001      	b.n	8006644 <HAL_SD_ConfigWideBusOperation+0xc0>
      sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC2);
    }
#endif /* SDMMC2 */
    else
    {
      sdmmc_clk = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    if (sdmmc_clk != 0U)
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8083 	beq.w	8006752 <HAL_SD_ConfigWideBusOperation+0x1ce>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	4951      	ldr	r1, [pc, #324]	@ (80067b0 <HAL_SD_ConfigWideBusOperation+0x22c>)
 800666a:	fba1 1303 	umull	r1, r3, r1, r3
 800666e:	0e1b      	lsrs	r3, r3, #24
 8006670:	429a      	cmp	r2, r3
 8006672:	d303      	bcc.n	800667c <HAL_SD_ConfigWideBusOperation+0xf8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	e05a      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006684:	d103      	bne.n	800668e <HAL_SD_ConfigWideBusOperation+0x10a>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	e051      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006696:	d126      	bne.n	80066e6 <HAL_SD_ConfigWideBusOperation+0x162>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10e      	bne.n	80066be <HAL_SD_ConfigWideBusOperation+0x13a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	4a44      	ldr	r2, [pc, #272]	@ (80067b4 <HAL_SD_ConfigWideBusOperation+0x230>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d906      	bls.n	80066b6 <HAL_SD_ConfigWideBusOperation+0x132>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	4a41      	ldr	r2, [pc, #260]	@ (80067b0 <HAL_SD_ConfigWideBusOperation+0x22c>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	0e5b      	lsrs	r3, r3, #25
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	e03d      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e039      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ca:	4a3a      	ldr	r2, [pc, #232]	@ (80067b4 <HAL_SD_ConfigWideBusOperation+0x230>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d906      	bls.n	80066de <HAL_SD_ConfigWideBusOperation+0x15a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	4a37      	ldr	r2, [pc, #220]	@ (80067b0 <HAL_SD_ConfigWideBusOperation+0x22c>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	0e5b      	lsrs	r3, r3, #25
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	e029      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e025      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10e      	bne.n	800670c <HAL_SD_ConfigWideBusOperation+0x188>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	4a31      	ldr	r2, [pc, #196]	@ (80067b8 <HAL_SD_ConfigWideBusOperation+0x234>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d906      	bls.n	8006704 <HAL_SD_ConfigWideBusOperation+0x180>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	4a2d      	ldr	r2, [pc, #180]	@ (80067b0 <HAL_SD_ConfigWideBusOperation+0x22c>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	0e1b      	lsrs	r3, r3, #24
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e016      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e012      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006714:	fbb2 f3f3 	udiv	r3, r2, r3
 8006718:	4a27      	ldr	r2, [pc, #156]	@ (80067b8 <HAL_SD_ConfigWideBusOperation+0x234>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d906      	bls.n	800672c <HAL_SD_ConfigWideBusOperation+0x1a8>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	4a23      	ldr	r2, [pc, #140]	@ (80067b0 <HAL_SD_ConfigWideBusOperation+0x22c>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	0e1b      	lsrs	r3, r3, #24
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	e002      	b.n	8006732 <HAL_SD_ConfigWideBusOperation+0x1ae>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681c      	ldr	r4, [r3, #0]
 8006736:	466a      	mov	r2, sp
 8006738:	f107 0314 	add.w	r3, r7, #20
 800673c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006740:	e882 0003 	stmia.w	r2, {r0, r1}
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	cb0e      	ldmia	r3, {r1, r2, r3}
 800674a:	4620      	mov	r0, r4
 800674c:	f001 fe2c 	bl	80083a8 <SDMMC_Init>
 8006750:	e008      	b.n	8006764 <HAL_SD_ConfigWideBusOperation+0x1e0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006756:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800676c:	4618      	mov	r0, r3
 800676e:	f001 fee7 	bl	8008540 <SDMMC_CmdBlockLength>
 8006772:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <HAL_SD_ConfigWideBusOperation+0x210>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a0a      	ldr	r2, [pc, #40]	@ (80067a8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8006780:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800679c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	372c      	adds	r7, #44	@ 0x2c
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd90      	pop	{r4, r7, pc}
 80067a8:	1fe00fff 	.word	0x1fe00fff
 80067ac:	46008000 	.word	0x46008000
 80067b0:	55e63b89 	.word	0x55e63b89
 80067b4:	02faf080 	.word	0x02faf080
 80067b8:	017d7840 	.word	0x017d7840

080067bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80067c8:	f107 030c 	add.w	r3, r7, #12
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa40 	bl	8006c54 <SD_SendStatus>
 80067d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	0a5b      	lsrs	r3, r3, #9
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80067f2:	693b      	ldr	r3, [r7, #16]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b090      	sub	sp, #64	@ 0x40
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006808:	f7fa fc52 	bl	80010b0 <HAL_GetTick>
 800680c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f001 fe10 	bl	8008438 <SDMMC_GetPowerState>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800681e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006822:	e0b5      	b.n	8006990 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006828:	2b03      	cmp	r3, #3
 800682a:	d02e      	beq.n	800688a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f001 ff91 	bl	8008758 <SDMMC_CmdSendCID>
 8006836:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <SD_InitCard+0x46>
    {
      return errorstate;
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	e0a6      	b.n	8006990 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2100      	movs	r1, #0
 8006848:	4618      	mov	r0, r3
 800684a:	f001 fe3a 	bl	80084c2 <SDMMC_GetResponse>
 800684e:	4602      	mov	r2, r0
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2104      	movs	r1, #4
 800685a:	4618      	mov	r0, r3
 800685c:	f001 fe31 	bl	80084c2 <SDMMC_GetResponse>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2108      	movs	r1, #8
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fe28 	bl	80084c2 <SDMMC_GetResponse>
 8006872:	4602      	mov	r2, r0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	210c      	movs	r1, #12
 800687e:	4618      	mov	r0, r3
 8006880:	f001 fe1f 	bl	80084c2 <SDMMC_GetResponse>
 8006884:	4602      	mov	r2, r0
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	2b03      	cmp	r3, #3
 8006890:	d01d      	beq.n	80068ce <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006892:	e019      	b.n	80068c8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f107 020a 	add.w	r2, r7, #10
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 ff99 	bl	80087d6 <SDMMC_CmdSetRelAdd>
 80068a4:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80068ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ae:	e06f      	b.n	8006990 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80068b0:	f7fa fbfe 	bl	80010b0 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3287 	movw	r2, #4999	@ 0x1387
 80068be:	4293      	cmp	r3, r2
 80068c0:	d902      	bls.n	80068c8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80068c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80068c6:	e063      	b.n	8006990 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80068c8:	897b      	ldrh	r3, [r7, #10]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0e2      	beq.n	8006894 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d036      	beq.n	8006944 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80068d6:	897b      	ldrh	r3, [r7, #10]
 80068d8:	461a      	mov	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e6:	041b      	lsls	r3, r3, #16
 80068e8:	4619      	mov	r1, r3
 80068ea:	4610      	mov	r0, r2
 80068ec:	f001 ff53 	bl	8008796 <SDMMC_CmdSendCSD>
 80068f0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80068f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <SD_InitCard+0x100>
    {
      return errorstate;
 80068f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fa:	e049      	b.n	8006990 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f001 fddd 	bl	80084c2 <SDMMC_GetResponse>
 8006908:	4602      	mov	r2, r0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2104      	movs	r1, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fdd4 	bl	80084c2 <SDMMC_GetResponse>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2108      	movs	r1, #8
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fdcb 	bl	80084c2 <SDMMC_GetResponse>
 800692c:	4602      	mov	r2, r0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	210c      	movs	r1, #12
 8006938:	4618      	mov	r0, r3
 800693a:	f001 fdc2 	bl	80084c2 <SDMMC_GetResponse>
 800693e:	4602      	mov	r2, r0
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2104      	movs	r1, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f001 fdb9 	bl	80084c2 <SDMMC_GetResponse>
 8006950:	4603      	mov	r3, r0
 8006952:	0d1a      	lsrs	r2, r3, #20
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006958:	f107 030c 	add.w	r3, r7, #12
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff fbae 	bl	80060c0 <HAL_SD_GetCardCSD>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800696a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800696e:	e00f      	b.n	8006990 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006978:	041b      	lsls	r3, r3, #16
 800697a:	4619      	mov	r1, r3
 800697c:	4610      	mov	r0, r2
 800697e:	f001 fe02 	bl	8008586 <SDMMC_CmdSelDesel>
 8006982:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <SD_InitCard+0x192>
  {
    return errorstate;
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	e000      	b.n	8006990 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3740      	adds	r7, #64	@ 0x40
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 fe0b 	bl	80085cc <SDMMC_CmdGoIdleState>
 80069b6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	e072      	b.n	8006aa8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 fe1e 	bl	8008608 <SDMMC_CmdOperCond>
 80069cc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069d4:	d10d      	bne.n	80069f2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fdf3 	bl	80085cc <SDMMC_CmdGoIdleState>
 80069e6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <SD_PowerON+0x60>
    {
      return errorstate;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	e05a      	b.n	8006aa8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d137      	bne.n	8006a70 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fe1e 	bl	8008648 <SDMMC_CmdAppCommand>
 8006a0c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d02d      	beq.n	8006a70 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006a18:	e046      	b.n	8006aa8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fe11 	bl	8008648 <SDMMC_CmdAppCommand>
 8006a26:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <SD_PowerON+0x9a>
    {
      return errorstate;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	e03a      	b.n	8006aa8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	491e      	ldr	r1, [pc, #120]	@ (8006ab0 <SD_PowerON+0x118>)
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 fe28 	bl	800868e <SDMMC_CmdAppOperCommand>
 8006a3e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006a4a:	e02d      	b.n	8006aa8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 fd35 	bl	80084c2 <SDMMC_GetResponse>
 8006a58:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	0fdb      	lsrs	r3, r3, #31
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <SD_PowerON+0xce>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <SD_PowerON+0xd0>
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]

    count++;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d802      	bhi.n	8006a80 <SD_PowerON+0xe8>
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0cc      	beq.n	8006a1a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d902      	bls.n	8006a90 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a8e:	e00b      	b.n	8006aa8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	c1100000 	.word	0xc1100000

08006ab4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08c      	sub	sp, #48	@ 0x30
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006abe:	f7fa faf7 	bl	80010b0 <HAL_GetTick>
 8006ac2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 fcf7 	bl	80084c2 <SDMMC_GetResponse>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ada:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ade:	d102      	bne.n	8006ae6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ae0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ae4:	e0b0      	b.n	8006c48 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2140      	movs	r1, #64	@ 0x40
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fd27 	bl	8008540 <SDMMC_CmdBlockLength>
 8006af2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	e0a0      	b.n	8006c48 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f001 fd98 	bl	8008648 <SDMMC_CmdAppCommand>
 8006b18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	e08d      	b.n	8006c48 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b30:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006b32:	2340      	movs	r3, #64	@ 0x40
 8006b34:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006b36:	2360      	movs	r3, #96	@ 0x60
 8006b38:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b42:	2301      	movs	r3, #1
 8006b44:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f107 0208 	add.w	r2, r7, #8
 8006b4e:	4611      	mov	r1, r2
 8006b50:	4618      	mov	r0, r3
 8006b52:	f001 fcc9 	bl	80084e8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f001 fe80 	bl	8008860 <SDMMC_CmdStatusRegister>
 8006b60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d02b      	beq.n	8006bc0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	e069      	b.n	8006c48 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d013      	beq.n	8006baa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b86:	e00d      	b.n	8006ba4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fc35 	bl	80083fc <SDMMC_ReadFIFO>
 8006b92:	4602      	mov	r2, r0
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	601a      	str	r2, [r3, #0]
        pData++;
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8006b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba6:	2b07      	cmp	r3, #7
 8006ba8:	d9ee      	bls.n	8006b88 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006baa:	f7fa fa81 	bl	80010b0 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bb8:	d102      	bne.n	8006bc0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006bbe:	e043      	b.n	8006c48 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0d2      	beq.n	8006b74 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd4:	f003 0308 	and.w	r3, r3, #8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006bdc:	2308      	movs	r3, #8
 8006bde:	e033      	b.n	8006c48 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e02a      	b.n	8006c48 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006c00:	2320      	movs	r3, #32
 8006c02:	e021      	b.n	8006c48 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f001 fbf7 	bl	80083fc <SDMMC_ReadFIFO>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	601a      	str	r2, [r3, #0]
    pData++;
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	3304      	adds	r3, #4
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006c1a:	f7fa fa49 	bl	80010b0 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c28:	d102      	bne.n	8006c30 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c2a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006c2e:	e00b      	b.n	8006c48 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e2      	bne.n	8006c04 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a03      	ldr	r2, [pc, #12]	@ (8006c50 <SD_SendSDStatus+0x19c>)
 8006c44:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3730      	adds	r7, #48	@ 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	18000f3a 	.word	0x18000f3a

08006c54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d102      	bne.n	8006c6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c68:	e018      	b.n	8006c9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c72:	041b      	lsls	r3, r3, #16
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f001 fdcf 	bl	800881a <SDMMC_CmdSendStatus>
 8006c7c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	e009      	b.n	8006c9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fc17 	bl	80084c2 <SDMMC_GetResponse>
 8006c94:	4602      	mov	r2, r0
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f001 fc01 	bl	80084c2 <SDMMC_GetResponse>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cca:	d102      	bne.n	8006cd2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ccc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006cd0:	e02f      	b.n	8006d32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006cd2:	f107 030c 	add.w	r3, r7, #12
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f879 	bl	8006dd0 <SD_FindSCR>
 8006cde:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	e023      	b.n	8006d32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01c      	beq.n	8006d2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4610      	mov	r0, r2
 8006d02:	f001 fca1 	bl	8008648 <SDMMC_CmdAppCommand>
 8006d06:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	e00f      	b.n	8006d32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f001 fcd8 	bl	80086ce <SDMMC_CmdBusWidth>
 8006d1e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	e003      	b.n	8006d32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e001      	b.n	8006d32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006d42:	2300      	movs	r3, #0
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	2300      	movs	r3, #0
 8006d48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fbb6 	bl	80084c2 <SDMMC_GetResponse>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d60:	d102      	bne.n	8006d68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d66:	e02f      	b.n	8006dc8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d68:	f107 030c 	add.w	r3, r7, #12
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f82e 	bl	8006dd0 <SD_FindSCR>
 8006d74:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	e023      	b.n	8006dc8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01c      	beq.n	8006dc4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d92:	041b      	lsls	r3, r3, #16
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f001 fc56 	bl	8008648 <SDMMC_CmdAppCommand>
 8006d9c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	e00f      	b.n	8006dc8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fc8d 	bl	80086ce <SDMMC_CmdBusWidth>
 8006db4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	e003      	b.n	8006dc8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e001      	b.n	8006dc8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dc4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08e      	sub	sp, #56	@ 0x38
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006dda:	f7fa f969 	bl	80010b0 <HAL_GetTick>
 8006dde:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006de4:	2300      	movs	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2108      	movs	r1, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 fba2 	bl	8008540 <SDMMC_CmdBlockLength>
 8006dfc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e06:	e0ad      	b.n	8006f64 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e10:	041b      	lsls	r3, r3, #16
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f001 fc17 	bl	8008648 <SDMMC_CmdAppCommand>
 8006e1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	e09e      	b.n	8006f64 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006e2c:	2308      	movs	r3, #8
 8006e2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006e30:	2330      	movs	r3, #48	@ 0x30
 8006e32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e34:	2302      	movs	r3, #2
 8006e36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f107 0210 	add.w	r2, r7, #16
 8006e48:	4611      	mov	r1, r2
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 fb4c 	bl	80084e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 fc5d 	bl	8008714 <SDMMC_CmdSendSCR>
 8006e5a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d027      	beq.n	8006eb2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	e07e      	b.n	8006f64 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d113      	bne.n	8006e9c <SD_FindSCR+0xcc>
 8006e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d110      	bne.n	8006e9c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 fabc 	bl	80083fc <SDMMC_ReadFIFO>
 8006e84:	4603      	mov	r3, r0
 8006e86:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fab5 	bl	80083fc <SDMMC_ReadFIFO>
 8006e92:	4603      	mov	r3, r0
 8006e94:	60fb      	str	r3, [r7, #12]
      index++;
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	3301      	adds	r3, #1
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006e9c:	f7fa f908 	bl	80010b0 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006eaa:	d102      	bne.n	8006eb2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006eac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006eb0:	e058      	b.n	8006f64 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eb8:	f240 532a 	movw	r3, #1322	@ 0x52a
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d0d1      	beq.n	8006e66 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006ed8:	2308      	movs	r3, #8
 8006eda:	e043      	b.n	8006f64 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e036      	b.n	8006f64 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006f0c:	2320      	movs	r3, #32
 8006f0e:	e029      	b.n	8006f64 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <SD_FindSCR+0x19c>)
 8006f16:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	061a      	lsls	r2, r3, #24
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f24:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	0a1b      	lsrs	r3, r3, #8
 8006f2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8006f2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	0e1b      	lsrs	r3, r3, #24
 8006f34:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8006f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f38:	601a      	str	r2, [r3, #0]
    scr++;
 8006f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	061a      	lsls	r2, r3, #24
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f4c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	0a1b      	lsrs	r3, r3, #8
 8006f52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8006f56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	0e1b      	lsrs	r3, r3, #24
 8006f5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8006f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f60:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3738      	adds	r7, #56	@ 0x38
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	18000f3a 	.word	0x18000f3a

08006f70 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e03e      	b.n	8007004 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7f9 fef6 	bl	8000d8c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f001 f8a6 	bl	80080fc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	f001 f96c 	bl	8008298 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6858      	ldr	r0, [r3, #4]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	f001 f9b0 	bl	8008332 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	6892      	ldr	r2, [r2, #8]
 8006fda:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	6892      	ldr	r2, [r2, #8]
 8006fe6:	f041 0101 	orr.w	r1, r1, #1
 8006fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006fee:	4b07      	ldr	r3, [pc, #28]	@ (800700c <HAL_SRAM_Init+0x9c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a06      	ldr	r2, [pc, #24]	@ (800700c <HAL_SRAM_Init+0x9c>)
 8006ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ff8:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	47000400 	.word	0x47000400

08007010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e049      	b.n	80070b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7f9 fd30 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3304      	adds	r3, #4
 800704c:	4619      	mov	r1, r3
 800704e:	4610      	mov	r0, r2
 8007050:	f000 fac8 	bl	80075e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e049      	b.n	8007164 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f841 	bl	800716c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4619      	mov	r1, r3
 80070fc:	4610      	mov	r0, r2
 80070fe:	f000 fa71 	bl	80075e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800719a:	2302      	movs	r3, #2
 800719c:	e0ff      	b.n	800739e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b14      	cmp	r3, #20
 80071aa:	f200 80f0 	bhi.w	800738e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80071ae:	a201      	add	r2, pc, #4	@ (adr r2, 80071b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	08007209 	.word	0x08007209
 80071b8:	0800738f 	.word	0x0800738f
 80071bc:	0800738f 	.word	0x0800738f
 80071c0:	0800738f 	.word	0x0800738f
 80071c4:	08007249 	.word	0x08007249
 80071c8:	0800738f 	.word	0x0800738f
 80071cc:	0800738f 	.word	0x0800738f
 80071d0:	0800738f 	.word	0x0800738f
 80071d4:	0800728b 	.word	0x0800728b
 80071d8:	0800738f 	.word	0x0800738f
 80071dc:	0800738f 	.word	0x0800738f
 80071e0:	0800738f 	.word	0x0800738f
 80071e4:	080072cb 	.word	0x080072cb
 80071e8:	0800738f 	.word	0x0800738f
 80071ec:	0800738f 	.word	0x0800738f
 80071f0:	0800738f 	.word	0x0800738f
 80071f4:	0800730d 	.word	0x0800730d
 80071f8:	0800738f 	.word	0x0800738f
 80071fc:	0800738f 	.word	0x0800738f
 8007200:	0800738f 	.word	0x0800738f
 8007204:	0800734d 	.word	0x0800734d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fad2 	bl	80077b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0208 	orr.w	r2, r2, #8
 8007222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0204 	bic.w	r2, r2, #4
 8007232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6999      	ldr	r1, [r3, #24]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	619a      	str	r2, [r3, #24]
      break;
 8007246:	e0a5      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fb4c 	bl	80078ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6999      	ldr	r1, [r3, #24]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	021a      	lsls	r2, r3, #8
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	619a      	str	r2, [r3, #24]
      break;
 8007288:	e084      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fbc3 	bl	8007a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0208 	orr.w	r2, r2, #8
 80072a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0204 	bic.w	r2, r2, #4
 80072b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69d9      	ldr	r1, [r3, #28]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	61da      	str	r2, [r3, #28]
      break;
 80072c8:	e064      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f000 fc39 	bl	8007b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69d9      	ldr	r1, [r3, #28]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	021a      	lsls	r2, r3, #8
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	61da      	str	r2, [r3, #28]
      break;
 800730a:	e043      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fcb0 	bl	8007c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0208 	orr.w	r2, r2, #8
 8007326:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0204 	bic.w	r2, r2, #4
 8007336:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691a      	ldr	r2, [r3, #16]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800734a:	e023      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fcfa 	bl	8007d4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007366:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007376:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800738c:	e002      	b.n	8007394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
      break;
 8007392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop

080073a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_TIM_ConfigClockSource+0x1c>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e0fe      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x21a>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80073e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007400:	f000 80c9 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007404:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007408:	f200 80ce 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800740c:	4a6f      	ldr	r2, [pc, #444]	@ (80075cc <HAL_TIM_ConfigClockSource+0x224>)
 800740e:	4293      	cmp	r3, r2
 8007410:	f000 80c1 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007414:	4a6d      	ldr	r2, [pc, #436]	@ (80075cc <HAL_TIM_ConfigClockSource+0x224>)
 8007416:	4293      	cmp	r3, r2
 8007418:	f200 80c6 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800741c:	4a6c      	ldr	r2, [pc, #432]	@ (80075d0 <HAL_TIM_ConfigClockSource+0x228>)
 800741e:	4293      	cmp	r3, r2
 8007420:	f000 80b9 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007424:	4a6a      	ldr	r2, [pc, #424]	@ (80075d0 <HAL_TIM_ConfigClockSource+0x228>)
 8007426:	4293      	cmp	r3, r2
 8007428:	f200 80be 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800742c:	4a69      	ldr	r2, [pc, #420]	@ (80075d4 <HAL_TIM_ConfigClockSource+0x22c>)
 800742e:	4293      	cmp	r3, r2
 8007430:	f000 80b1 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007434:	4a67      	ldr	r2, [pc, #412]	@ (80075d4 <HAL_TIM_ConfigClockSource+0x22c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	f200 80b6 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800743c:	4a66      	ldr	r2, [pc, #408]	@ (80075d8 <HAL_TIM_ConfigClockSource+0x230>)
 800743e:	4293      	cmp	r3, r2
 8007440:	f000 80a9 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007444:	4a64      	ldr	r2, [pc, #400]	@ (80075d8 <HAL_TIM_ConfigClockSource+0x230>)
 8007446:	4293      	cmp	r3, r2
 8007448:	f200 80ae 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800744c:	4a63      	ldr	r2, [pc, #396]	@ (80075dc <HAL_TIM_ConfigClockSource+0x234>)
 800744e:	4293      	cmp	r3, r2
 8007450:	f000 80a1 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007454:	4a61      	ldr	r2, [pc, #388]	@ (80075dc <HAL_TIM_ConfigClockSource+0x234>)
 8007456:	4293      	cmp	r3, r2
 8007458:	f200 80a6 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800745c:	4a60      	ldr	r2, [pc, #384]	@ (80075e0 <HAL_TIM_ConfigClockSource+0x238>)
 800745e:	4293      	cmp	r3, r2
 8007460:	f000 8099 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007464:	4a5e      	ldr	r2, [pc, #376]	@ (80075e0 <HAL_TIM_ConfigClockSource+0x238>)
 8007466:	4293      	cmp	r3, r2
 8007468:	f200 809e 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800746c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007470:	f000 8091 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007474:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007478:	f200 8096 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800747c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007480:	f000 8089 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 8007484:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007488:	f200 808e 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007490:	d03e      	beq.n	8007510 <HAL_TIM_ConfigClockSource+0x168>
 8007492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007496:	f200 8087 	bhi.w	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	f000 8086 	beq.w	80075ae <HAL_TIM_ConfigClockSource+0x206>
 80074a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074a6:	d87f      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074a8:	2b70      	cmp	r3, #112	@ 0x70
 80074aa:	d01a      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0x13a>
 80074ac:	2b70      	cmp	r3, #112	@ 0x70
 80074ae:	d87b      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074b0:	2b60      	cmp	r3, #96	@ 0x60
 80074b2:	d050      	beq.n	8007556 <HAL_TIM_ConfigClockSource+0x1ae>
 80074b4:	2b60      	cmp	r3, #96	@ 0x60
 80074b6:	d877      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074b8:	2b50      	cmp	r3, #80	@ 0x50
 80074ba:	d03c      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0x18e>
 80074bc:	2b50      	cmp	r3, #80	@ 0x50
 80074be:	d873      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074c0:	2b40      	cmp	r3, #64	@ 0x40
 80074c2:	d058      	beq.n	8007576 <HAL_TIM_ConfigClockSource+0x1ce>
 80074c4:	2b40      	cmp	r3, #64	@ 0x40
 80074c6:	d86f      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074c8:	2b30      	cmp	r3, #48	@ 0x30
 80074ca:	d064      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 80074cc:	2b30      	cmp	r3, #48	@ 0x30
 80074ce:	d86b      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d060      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d867      	bhi.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d05c      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d05a      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0x1ee>
 80074e0:	e062      	b.n	80075a8 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074f2:	f000 fd13 	bl	8007f1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	609a      	str	r2, [r3, #8]
      break;
 800750e:	e04f      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007520:	f000 fcfc 	bl	8007f1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689a      	ldr	r2, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007532:	609a      	str	r2, [r3, #8]
      break;
 8007534:	e03c      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	461a      	mov	r2, r3
 8007544:	f000 fc6e 	bl	8007e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2150      	movs	r1, #80	@ 0x50
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fcc7 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 8007554:	e02c      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007562:	461a      	mov	r2, r3
 8007564:	f000 fc8d 	bl	8007e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2160      	movs	r1, #96	@ 0x60
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fcb7 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 8007574:	e01c      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007582:	461a      	mov	r2, r3
 8007584:	f000 fc4e 	bl	8007e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2140      	movs	r1, #64	@ 0x40
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fca7 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 8007594:	e00c      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f000 fc9e 	bl	8007ee2 <TIM_ITRx_SetConfig>
      break;
 80075a6:	e003      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
      break;
 80075ac:	e000      	b.n	80075b0 <HAL_TIM_ConfigClockSource+0x208>
      break;
 80075ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	00100070 	.word	0x00100070
 80075d0:	00100060 	.word	0x00100060
 80075d4:	00100050 	.word	0x00100050
 80075d8:	00100040 	.word	0x00100040
 80075dc:	00100030 	.word	0x00100030
 80075e0:	00100020 	.word	0x00100020

080075e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a62      	ldr	r2, [pc, #392]	@ (8007780 <TIM_Base_SetConfig+0x19c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d02b      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a61      	ldr	r2, [pc, #388]	@ (8007784 <TIM_Base_SetConfig+0x1a0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d027      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760a:	d023      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007612:	d01f      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a5c      	ldr	r2, [pc, #368]	@ (8007788 <TIM_Base_SetConfig+0x1a4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d01b      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a5b      	ldr	r2, [pc, #364]	@ (800778c <TIM_Base_SetConfig+0x1a8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d017      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a5a      	ldr	r2, [pc, #360]	@ (8007790 <TIM_Base_SetConfig+0x1ac>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a59      	ldr	r2, [pc, #356]	@ (8007794 <TIM_Base_SetConfig+0x1b0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00f      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a58      	ldr	r2, [pc, #352]	@ (8007798 <TIM_Base_SetConfig+0x1b4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00b      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a57      	ldr	r2, [pc, #348]	@ (800779c <TIM_Base_SetConfig+0x1b8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a56      	ldr	r2, [pc, #344]	@ (80077a0 <TIM_Base_SetConfig+0x1bc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_Base_SetConfig+0x70>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a55      	ldr	r2, [pc, #340]	@ (80077a4 <TIM_Base_SetConfig+0x1c0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d108      	bne.n	8007666 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a45      	ldr	r2, [pc, #276]	@ (8007780 <TIM_Base_SetConfig+0x19c>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d03b      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a44      	ldr	r2, [pc, #272]	@ (8007784 <TIM_Base_SetConfig+0x1a0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d037      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767c:	d033      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007684:	d02f      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a3f      	ldr	r2, [pc, #252]	@ (8007788 <TIM_Base_SetConfig+0x1a4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d02b      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a3e      	ldr	r2, [pc, #248]	@ (800778c <TIM_Base_SetConfig+0x1a8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d027      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a3d      	ldr	r2, [pc, #244]	@ (8007790 <TIM_Base_SetConfig+0x1ac>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d023      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007794 <TIM_Base_SetConfig+0x1b0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01f      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a3b      	ldr	r2, [pc, #236]	@ (8007798 <TIM_Base_SetConfig+0x1b4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d01b      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a3a      	ldr	r2, [pc, #232]	@ (800779c <TIM_Base_SetConfig+0x1b8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d017      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a39      	ldr	r2, [pc, #228]	@ (80077a0 <TIM_Base_SetConfig+0x1bc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d013      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a38      	ldr	r2, [pc, #224]	@ (80077a4 <TIM_Base_SetConfig+0x1c0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00f      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a37      	ldr	r2, [pc, #220]	@ (80077a8 <TIM_Base_SetConfig+0x1c4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00b      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a36      	ldr	r2, [pc, #216]	@ (80077ac <TIM_Base_SetConfig+0x1c8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d007      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a35      	ldr	r2, [pc, #212]	@ (80077b0 <TIM_Base_SetConfig+0x1cc>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_Base_SetConfig+0x102>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a34      	ldr	r2, [pc, #208]	@ (80077b4 <TIM_Base_SetConfig+0x1d0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d108      	bne.n	80076f8 <TIM_Base_SetConfig+0x114>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	4313      	orrs	r3, r2
 8007704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <TIM_Base_SetConfig+0x19c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <TIM_Base_SetConfig+0x168>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a17      	ldr	r2, [pc, #92]	@ (8007784 <TIM_Base_SetConfig+0x1a0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00f      	beq.n	800774c <TIM_Base_SetConfig+0x168>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a1c      	ldr	r2, [pc, #112]	@ (80077a0 <TIM_Base_SetConfig+0x1bc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <TIM_Base_SetConfig+0x168>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a1b      	ldr	r2, [pc, #108]	@ (80077a4 <TIM_Base_SetConfig+0x1c0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_Base_SetConfig+0x168>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a1c      	ldr	r2, [pc, #112]	@ (80077b0 <TIM_Base_SetConfig+0x1cc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_Base_SetConfig+0x168>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <TIM_Base_SetConfig+0x1d0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d103      	bne.n	8007754 <TIM_Base_SetConfig+0x170>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b01      	cmp	r3, #1
 8007764:	d105      	bne.n	8007772 <TIM_Base_SetConfig+0x18e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f023 0201 	bic.w	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	611a      	str	r2, [r3, #16]
  }
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40012c00 	.word	0x40012c00
 8007784:	50012c00 	.word	0x50012c00
 8007788:	40000400 	.word	0x40000400
 800778c:	50000400 	.word	0x50000400
 8007790:	40000800 	.word	0x40000800
 8007794:	50000800 	.word	0x50000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	50000c00 	.word	0x50000c00
 80077a0:	40013400 	.word	0x40013400
 80077a4:	50013400 	.word	0x50013400
 80077a8:	40001800 	.word	0x40001800
 80077ac:	50001800 	.word	0x50001800
 80077b0:	40014000 	.word	0x40014000
 80077b4:	50014000 	.word	0x50014000

080077b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f023 0201 	bic.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0303 	bic.w	r3, r3, #3
 80077f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f023 0302 	bic.w	r3, r3, #2
 8007804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a30      	ldr	r2, [pc, #192]	@ (80078d4 <TIM_OC1_SetConfig+0x11c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <TIM_OC1_SetConfig+0x88>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a2f      	ldr	r2, [pc, #188]	@ (80078d8 <TIM_OC1_SetConfig+0x120>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00f      	beq.n	8007840 <TIM_OC1_SetConfig+0x88>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a2e      	ldr	r2, [pc, #184]	@ (80078dc <TIM_OC1_SetConfig+0x124>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00b      	beq.n	8007840 <TIM_OC1_SetConfig+0x88>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a2d      	ldr	r2, [pc, #180]	@ (80078e0 <TIM_OC1_SetConfig+0x128>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d007      	beq.n	8007840 <TIM_OC1_SetConfig+0x88>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a2c      	ldr	r2, [pc, #176]	@ (80078e4 <TIM_OC1_SetConfig+0x12c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_OC1_SetConfig+0x88>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2b      	ldr	r2, [pc, #172]	@ (80078e8 <TIM_OC1_SetConfig+0x130>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10c      	bne.n	800785a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0308 	bic.w	r3, r3, #8
 8007846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f023 0304 	bic.w	r3, r3, #4
 8007858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1d      	ldr	r2, [pc, #116]	@ (80078d4 <TIM_OC1_SetConfig+0x11c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d013      	beq.n	800788a <TIM_OC1_SetConfig+0xd2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a1c      	ldr	r2, [pc, #112]	@ (80078d8 <TIM_OC1_SetConfig+0x120>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d00f      	beq.n	800788a <TIM_OC1_SetConfig+0xd2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a1b      	ldr	r2, [pc, #108]	@ (80078dc <TIM_OC1_SetConfig+0x124>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d00b      	beq.n	800788a <TIM_OC1_SetConfig+0xd2>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a1a      	ldr	r2, [pc, #104]	@ (80078e0 <TIM_OC1_SetConfig+0x128>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d007      	beq.n	800788a <TIM_OC1_SetConfig+0xd2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a19      	ldr	r2, [pc, #100]	@ (80078e4 <TIM_OC1_SetConfig+0x12c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d003      	beq.n	800788a <TIM_OC1_SetConfig+0xd2>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a18      	ldr	r2, [pc, #96]	@ (80078e8 <TIM_OC1_SetConfig+0x130>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d111      	bne.n	80078ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	621a      	str	r2, [r3, #32]
}
 80078c8:	bf00      	nop
 80078ca:	371c      	adds	r7, #28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	50012c00 	.word	0x50012c00
 80078dc:	40013400 	.word	0x40013400
 80078e0:	50013400 	.word	0x50013400
 80078e4:	40014000 	.word	0x40014000
 80078e8:	50014000 	.word	0x50014000

080078ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b087      	sub	sp, #28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f023 0210 	bic.w	r2, r3, #16
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2e      	ldr	r2, [pc, #184]	@ (8007a04 <TIM_OC2_SetConfig+0x118>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00b      	beq.n	8007968 <TIM_OC2_SetConfig+0x7c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a2d      	ldr	r2, [pc, #180]	@ (8007a08 <TIM_OC2_SetConfig+0x11c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d007      	beq.n	8007968 <TIM_OC2_SetConfig+0x7c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a2c      	ldr	r2, [pc, #176]	@ (8007a0c <TIM_OC2_SetConfig+0x120>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d003      	beq.n	8007968 <TIM_OC2_SetConfig+0x7c>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a2b      	ldr	r2, [pc, #172]	@ (8007a10 <TIM_OC2_SetConfig+0x124>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d10d      	bne.n	8007984 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800796e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a1f      	ldr	r2, [pc, #124]	@ (8007a04 <TIM_OC2_SetConfig+0x118>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d013      	beq.n	80079b4 <TIM_OC2_SetConfig+0xc8>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a1e      	ldr	r2, [pc, #120]	@ (8007a08 <TIM_OC2_SetConfig+0x11c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00f      	beq.n	80079b4 <TIM_OC2_SetConfig+0xc8>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a1d      	ldr	r2, [pc, #116]	@ (8007a0c <TIM_OC2_SetConfig+0x120>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00b      	beq.n	80079b4 <TIM_OC2_SetConfig+0xc8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a1c      	ldr	r2, [pc, #112]	@ (8007a10 <TIM_OC2_SetConfig+0x124>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d007      	beq.n	80079b4 <TIM_OC2_SetConfig+0xc8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007a14 <TIM_OC2_SetConfig+0x128>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <TIM_OC2_SetConfig+0xc8>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007a18 <TIM_OC2_SetConfig+0x12c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d113      	bne.n	80079dc <TIM_OC2_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	621a      	str	r2, [r3, #32]
}
 80079f6:	bf00      	nop
 80079f8:	371c      	adds	r7, #28
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40012c00 	.word	0x40012c00
 8007a08:	50012c00 	.word	0x50012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	50013400 	.word	0x50013400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	50014000 	.word	0x50014000

08007a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a2d      	ldr	r2, [pc, #180]	@ (8007b30 <TIM_OC3_SetConfig+0x114>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00b      	beq.n	8007a96 <TIM_OC3_SetConfig+0x7a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2c      	ldr	r2, [pc, #176]	@ (8007b34 <TIM_OC3_SetConfig+0x118>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d007      	beq.n	8007a96 <TIM_OC3_SetConfig+0x7a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a2b      	ldr	r2, [pc, #172]	@ (8007b38 <TIM_OC3_SetConfig+0x11c>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC3_SetConfig+0x7a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2a      	ldr	r2, [pc, #168]	@ (8007b3c <TIM_OC3_SetConfig+0x120>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d10d      	bne.n	8007ab2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8007b30 <TIM_OC3_SetConfig+0x114>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xc6>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <TIM_OC3_SetConfig+0x118>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00f      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xc6>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b38 <TIM_OC3_SetConfig+0x11c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00b      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xc6>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a1b      	ldr	r2, [pc, #108]	@ (8007b3c <TIM_OC3_SetConfig+0x120>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d007      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xc6>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8007b40 <TIM_OC3_SetConfig+0x124>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d003      	beq.n	8007ae2 <TIM_OC3_SetConfig+0xc6>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a19      	ldr	r2, [pc, #100]	@ (8007b44 <TIM_OC3_SetConfig+0x128>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d113      	bne.n	8007b0a <TIM_OC3_SetConfig+0xee>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	011b      	lsls	r3, r3, #4
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	621a      	str	r2, [r3, #32]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	40012c00 	.word	0x40012c00
 8007b34:	50012c00 	.word	0x50012c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	50013400 	.word	0x50013400
 8007b40:	40014000 	.word	0x40014000
 8007b44:	50014000 	.word	0x50014000

08007b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	031b      	lsls	r3, r3, #12
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8007c60 <TIM_OC4_SetConfig+0x118>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00b      	beq.n	8007bc4 <TIM_OC4_SetConfig+0x7c>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a2d      	ldr	r2, [pc, #180]	@ (8007c64 <TIM_OC4_SetConfig+0x11c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d007      	beq.n	8007bc4 <TIM_OC4_SetConfig+0x7c>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007c68 <TIM_OC4_SetConfig+0x120>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_OC4_SetConfig+0x7c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8007c6c <TIM_OC4_SetConfig+0x124>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10d      	bne.n	8007be0 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	031b      	lsls	r3, r3, #12
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a1f      	ldr	r2, [pc, #124]	@ (8007c60 <TIM_OC4_SetConfig+0x118>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d013      	beq.n	8007c10 <TIM_OC4_SetConfig+0xc8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1e      	ldr	r2, [pc, #120]	@ (8007c64 <TIM_OC4_SetConfig+0x11c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00f      	beq.n	8007c10 <TIM_OC4_SetConfig+0xc8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c68 <TIM_OC4_SetConfig+0x120>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00b      	beq.n	8007c10 <TIM_OC4_SetConfig+0xc8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8007c6c <TIM_OC4_SetConfig+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d007      	beq.n	8007c10 <TIM_OC4_SetConfig+0xc8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a1b      	ldr	r2, [pc, #108]	@ (8007c70 <TIM_OC4_SetConfig+0x128>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d003      	beq.n	8007c10 <TIM_OC4_SetConfig+0xc8>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c74 <TIM_OC4_SetConfig+0x12c>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d113      	bne.n	8007c38 <TIM_OC4_SetConfig+0xf0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	019b      	lsls	r3, r3, #6
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	019b      	lsls	r3, r3, #6
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40012c00 	.word	0x40012c00
 8007c64:	50012c00 	.word	0x50012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	50013400 	.word	0x50013400
 8007c70:	40014000 	.word	0x40014000
 8007c74:	50014000 	.word	0x50014000

08007c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	041b      	lsls	r3, r3, #16
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a19      	ldr	r2, [pc, #100]	@ (8007d34 <TIM_OC5_SetConfig+0xbc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d013      	beq.n	8007cfa <TIM_OC5_SetConfig+0x82>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a18      	ldr	r2, [pc, #96]	@ (8007d38 <TIM_OC5_SetConfig+0xc0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00f      	beq.n	8007cfa <TIM_OC5_SetConfig+0x82>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a17      	ldr	r2, [pc, #92]	@ (8007d3c <TIM_OC5_SetConfig+0xc4>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00b      	beq.n	8007cfa <TIM_OC5_SetConfig+0x82>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a16      	ldr	r2, [pc, #88]	@ (8007d40 <TIM_OC5_SetConfig+0xc8>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <TIM_OC5_SetConfig+0x82>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a15      	ldr	r2, [pc, #84]	@ (8007d44 <TIM_OC5_SetConfig+0xcc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d003      	beq.n	8007cfa <TIM_OC5_SetConfig+0x82>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a14      	ldr	r2, [pc, #80]	@ (8007d48 <TIM_OC5_SetConfig+0xd0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d109      	bne.n	8007d0e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	697a      	ldr	r2, [r7, #20]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	621a      	str	r2, [r3, #32]
}
 8007d28:	bf00      	nop
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	40012c00 	.word	0x40012c00
 8007d38:	50012c00 	.word	0x50012c00
 8007d3c:	40013400 	.word	0x40013400
 8007d40:	50013400 	.word	0x50013400
 8007d44:	40014000 	.word	0x40014000
 8007d48:	50014000 	.word	0x50014000

08007d4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	051b      	lsls	r3, r3, #20
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a1a      	ldr	r2, [pc, #104]	@ (8007e0c <TIM_OC6_SetConfig+0xc0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d013      	beq.n	8007dd0 <TIM_OC6_SetConfig+0x84>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a19      	ldr	r2, [pc, #100]	@ (8007e10 <TIM_OC6_SetConfig+0xc4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00f      	beq.n	8007dd0 <TIM_OC6_SetConfig+0x84>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a18      	ldr	r2, [pc, #96]	@ (8007e14 <TIM_OC6_SetConfig+0xc8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00b      	beq.n	8007dd0 <TIM_OC6_SetConfig+0x84>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a17      	ldr	r2, [pc, #92]	@ (8007e18 <TIM_OC6_SetConfig+0xcc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d007      	beq.n	8007dd0 <TIM_OC6_SetConfig+0x84>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a16      	ldr	r2, [pc, #88]	@ (8007e1c <TIM_OC6_SetConfig+0xd0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_OC6_SetConfig+0x84>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a15      	ldr	r2, [pc, #84]	@ (8007e20 <TIM_OC6_SetConfig+0xd4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d109      	bne.n	8007de4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	029b      	lsls	r3, r3, #10
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40012c00 	.word	0x40012c00
 8007e10:	50012c00 	.word	0x50012c00
 8007e14:	40013400 	.word	0x40013400
 8007e18:	50013400 	.word	0x50013400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	50014000 	.word	0x50014000

08007e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f023 0201 	bic.w	r2, r3, #1
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f023 030a 	bic.w	r3, r3, #10
 8007e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	621a      	str	r2, [r3, #32]
}
 8007e76:	bf00      	nop
 8007e78:	371c      	adds	r7, #28
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b087      	sub	sp, #28
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f023 0210 	bic.w	r2, r3, #16
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	031b      	lsls	r3, r3, #12
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	621a      	str	r2, [r3, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	f043 0307 	orr.w	r3, r3, #7
 8007f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	609a      	str	r2, [r3, #8]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	021a      	lsls	r2, r3, #8
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	609a      	str	r2, [r3, #8]
}
 8007f50:	bf00      	nop
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e0a1      	b.n	80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a4a      	ldr	r2, [pc, #296]	@ (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00e      	beq.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a49      	ldr	r2, [pc, #292]	@ (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d009      	beq.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a47      	ldr	r2, [pc, #284]	@ (80080cc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a46      	ldr	r2, [pc, #280]	@ (80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d108      	bne.n	8007fce <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007fc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a34      	ldr	r2, [pc, #208]	@ (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d04a      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a33      	ldr	r2, [pc, #204]	@ (80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d045      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008008:	d040      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008012:	d03b      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a2e      	ldr	r2, [pc, #184]	@ (80080d4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d036      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a2d      	ldr	r2, [pc, #180]	@ (80080d8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d031      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a2b      	ldr	r2, [pc, #172]	@ (80080dc <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d02c      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a2a      	ldr	r2, [pc, #168]	@ (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d027      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a28      	ldr	r2, [pc, #160]	@ (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d022      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a27      	ldr	r2, [pc, #156]	@ (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d01d      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d018      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a1c      	ldr	r2, [pc, #112]	@ (80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a20      	ldr	r2, [pc, #128]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1f      	ldr	r2, [pc, #124]	@ (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1d      	ldr	r2, [pc, #116]	@ (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x130>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1c      	ldr	r2, [pc, #112]	@ (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d10c      	bne.n	80080a6 <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008092:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	4313      	orrs	r3, r2
 800809c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40012c00 	.word	0x40012c00
 80080c8:	50012c00 	.word	0x50012c00
 80080cc:	40013400 	.word	0x40013400
 80080d0:	50013400 	.word	0x50013400
 80080d4:	40000400 	.word	0x40000400
 80080d8:	50000400 	.word	0x50000400
 80080dc:	40000800 	.word	0x40000800
 80080e0:	50000800 	.word	0x50000800
 80080e4:	40000c00 	.word	0x40000c00
 80080e8:	50000c00 	.word	0x50000c00
 80080ec:	40001800 	.word	0x40001800
 80080f0:	50001800 	.word	0x50001800
 80080f4:	40014000 	.word	0x40014000
 80080f8:	50014000 	.word	0x50014000

080080fc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	f023 0101 	bic.w	r1, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	2b08      	cmp	r3, #8
 8008124:	d102      	bne.n	800812c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008126:	2340      	movs	r3, #64	@ 0x40
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	e001      	b.n	8008130 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800812c:	2300      	movs	r3, #0
 800812e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800813c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008142:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008148:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800814e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008154:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800815a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008160:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 8008166:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800816c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4313      	orrs	r3, r2
 800819c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800819e:	4b3d      	ldr	r3, [pc, #244]	@ (8008294 <FMC_NORSRAM_Init+0x198>)
 80081a0:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081a8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081b0:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80081b8:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80081c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	43db      	mvns	r3, r3
 80081d0:	ea02 0103 	and.w	r1, r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	4319      	orrs	r1, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ea:	d10c      	bne.n	8008206 <FMC_NORSRAM_Init+0x10a>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d008      	beq.n	8008206 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d006      	beq.n	800821c <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008222:	2b01      	cmp	r3, #1
 8008224:	d12f      	bne.n	8008286 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	0c1b      	lsrs	r3, r3, #16
 800822c:	041b      	lsls	r3, r3, #16
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008232:	431a      	orrs	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b04      	cmp	r3, #4
 800823e:	d014      	beq.n	800826a <FMC_NORSRAM_Init+0x16e>
 8008240:	2b04      	cmp	r3, #4
 8008242:	d819      	bhi.n	8008278 <FMC_NORSRAM_Init+0x17c>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <FMC_NORSRAM_Init+0x152>
 8008248:	2b02      	cmp	r3, #2
 800824a:	d007      	beq.n	800825c <FMC_NORSRAM_Init+0x160>
 800824c:	e014      	b.n	8008278 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	621a      	str	r2, [r3, #32]
        break;
 800825a:	e014      	b.n	8008286 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	621a      	str	r2, [r3, #32]
        break;
 8008268:	e00d      	b.n	8008286 <FMC_NORSRAM_Init+0x18a>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]
        break;
 8008276:	e006      	b.n	8008286 <FMC_NORSRAM_Init+0x18a>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]
        break;
 8008284:	bf00      	nop
    }
  }

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	0008fb7f 	.word	0x0008fb7f

08008298 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80082ae:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80082b6:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80082be:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80082c6:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80082d0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	3b02      	subs	r3, #2
 80082d8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80082da:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80082e6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fa:	d113      	bne.n	8008324 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008304:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	3b01      	subs	r3, #1
 800830c:	051b      	lsls	r3, r3, #20
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	431a      	orrs	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	607a      	str	r2, [r7, #4]
 800833e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008346:	d121      	bne.n	800838c <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008350:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6819      	ldr	r1, [r3, #0]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	4319      	orrs	r1, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	4319      	orrs	r1, r3
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	079b      	lsls	r3, r3, #30
 800836e:	4319      	orrs	r1, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4319      	orrs	r1, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	041b      	lsls	r3, r3, #16
 800837c:	430b      	orrs	r3, r1
 800837e:	ea42 0103 	orr.w	r1, r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800838a:	e005      	b.n	8008398 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80083a8:	b084      	sub	sp, #16
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	f107 001c 	add.w	r0, r7, #28
 80083b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80083be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80083c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80083c2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 80083c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80083c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 80083ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80083cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 80083ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <SDMMC_Init+0x50>)
 80083dc:	4013      	ands	r3, r2
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	b004      	add	sp, #16
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	ffc02c00 	.word	0xffc02c00

080083fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f043 0203 	orr.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0303 	and.w	r3, r3, #3
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008472:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008478:	431a      	orrs	r2, r3
                       Command->CPSM);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800847e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4313      	orrs	r3, r2
 8008484:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	4b06      	ldr	r3, [pc, #24]	@ (80084a4 <SDMMC_SendCommand+0x50>)
 800848c:	4013      	ands	r3, r2
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	fffee0c0 	.word	0xfffee0c0

080084a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	b2db      	uxtb	r3, r3
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b085      	sub	sp, #20
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	6078      	str	r0, [r7, #4]
 80084ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3314      	adds	r3, #20
 80084d0:	461a      	mov	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800850e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008514:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800851a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008532:	2300      	movs	r3, #0

}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800854e:	2310      	movs	r3, #16
 8008550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008552:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008558:	2300      	movs	r3, #0
 800855a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800855c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ff73 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800856e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008572:	2110      	movs	r1, #16
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f995 	bl	80088a4 <SDMMC_GetCmdResp1>
 800857a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800857c:	69fb      	ldr	r3, [r7, #28]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b088      	sub	sp, #32
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008594:	2307      	movs	r3, #7
 8008596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800859c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800859e:	2300      	movs	r3, #0
 80085a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085a8:	f107 0308 	add.w	r3, r7, #8
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff ff50 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80085b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085b8:	2107      	movs	r1, #7
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f972 	bl	80088a4 <SDMMC_GetCmdResp1>
 80085c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085c2:	69fb      	ldr	r3, [r7, #28]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80085dc:	2300      	movs	r3, #0
 80085de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085e0:	2300      	movs	r3, #0
 80085e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80085e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ea:	f107 0308 	add.w	r3, r7, #8
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7ff ff2f 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb96 	bl	8008d28 <SDMMC_GetCmdError>
 80085fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085fe:	69fb      	ldr	r3, [r7, #28]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3720      	adds	r7, #32
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008610:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008616:	2308      	movs	r3, #8
 8008618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800861a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800861e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008628:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800862a:	f107 0308 	add.w	r3, r7, #8
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff ff0f 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fb28 	bl	8008c8c <SDMMC_GetCmdResp7>
 800863c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800863e:	69fb      	ldr	r3, [r7, #28]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008656:	2337      	movs	r3, #55	@ 0x37
 8008658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800865a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800865e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800866a:	f107 0308 	add.w	r3, r7, #8
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff feef 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800867a:	2137      	movs	r1, #55	@ 0x37
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f911 	bl	80088a4 <SDMMC_GetCmdResp1>
 8008682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008684:	69fb      	ldr	r3, [r7, #28]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b088      	sub	sp, #32
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800869c:	2329      	movs	r3, #41	@ 0x29
 800869e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086b0:	f107 0308 	add.w	r3, r7, #8
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fecc 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fa2d 	bl	8008b1c <SDMMC_GetCmdResp3>
 80086c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086c4:	69fb      	ldr	r3, [r7, #28]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3720      	adds	r7, #32
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b088      	sub	sp, #32
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80086dc:	2306      	movs	r3, #6
 80086de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086e6:	2300      	movs	r3, #0
 80086e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086f0:	f107 0308 	add.w	r3, r7, #8
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7ff feac 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80086fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008700:	2106      	movs	r1, #6
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f8ce 	bl	80088a4 <SDMMC_GetCmdResp1>
 8008708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800870a:	69fb      	ldr	r3, [r7, #28]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008720:	2333      	movs	r3, #51	@ 0x33
 8008722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800872e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008732:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008734:	f107 0308 	add.w	r3, r7, #8
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fe8a 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008744:	2133      	movs	r1, #51	@ 0x33
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f8ac 	bl	80088a4 <SDMMC_GetCmdResp1>
 800874c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800874e:	69fb      	ldr	r3, [r7, #28]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3720      	adds	r7, #32
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008764:	2302      	movs	r3, #2
 8008766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008768:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800876c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008776:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008778:	f107 0308 	add.w	r3, r7, #8
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff fe68 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f97f 	bl	8008a88 <SDMMC_GetCmdResp2>
 800878a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800878c:	69fb      	ldr	r3, [r7, #28]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3720      	adds	r7, #32
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b088      	sub	sp, #32
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087a4:	2309      	movs	r3, #9
 80087a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80087a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80087ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087b8:	f107 0308 	add.w	r3, r7, #8
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7ff fe48 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f95f 	bl	8008a88 <SDMMC_GetCmdResp2>
 80087ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087cc:	69fb      	ldr	r3, [r7, #28]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3720      	adds	r7, #32
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b088      	sub	sp, #32
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80087e4:	2303      	movs	r3, #3
 80087e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80087f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087f8:	f107 0308 	add.w	r3, r7, #8
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff fe28 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	2103      	movs	r1, #3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9c7 	bl	8008b9c <SDMMC_GetCmdResp6>
 800880e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008810:	69fb      	ldr	r3, [r7, #28]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b088      	sub	sp, #32
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008828:	230d      	movs	r3, #13
 800882a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800882c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008830:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800883a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800883c:	f107 0308 	add.w	r3, r7, #8
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff fe06 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800884c:	210d      	movs	r1, #13
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f828 	bl	80088a4 <SDMMC_GetCmdResp1>
 8008854:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008856:	69fb      	ldr	r3, [r7, #28]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800886c:	230d      	movs	r3, #13
 800886e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008874:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008876:	2300      	movs	r3, #0
 8008878:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800887a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800887e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008880:	f107 0308 	add.w	r3, r7, #8
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7ff fde4 	bl	8008454 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800888c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008890:	210d      	movs	r1, #13
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f806 	bl	80088a4 <SDMMC_GetCmdResp1>
 8008898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800889a:	69fb      	ldr	r3, [r7, #28]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3720      	adds	r7, #32
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b088      	sub	sp, #32
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	460b      	mov	r3, r1
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80088b2:	4b70      	ldr	r3, [pc, #448]	@ (8008a74 <SDMMC_GetCmdResp1+0x1d0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a70      	ldr	r2, [pc, #448]	@ (8008a78 <SDMMC_GetCmdResp1+0x1d4>)
 80088b8:	fba2 2303 	umull	r2, r3, r2, r3
 80088bc:	0a5a      	lsrs	r2, r3, #9
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	fb02 f303 	mul.w	r3, r2, r3
 80088c4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	1e5a      	subs	r2, r3, #1
 80088ca:	61fa      	str	r2, [r7, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80088d4:	e0c9      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088da:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	4b67      	ldr	r3, [pc, #412]	@ (8008a7c <SDMMC_GetCmdResp1+0x1d8>)
 80088e0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0ef      	beq.n	80088c6 <SDMMC_GetCmdResp1+0x22>
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1ea      	bne.n	80088c6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2204      	movs	r2, #4
 8008900:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008902:	2304      	movs	r3, #4
 8008904:	e0b1      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008918:	2301      	movs	r3, #1
 800891a:	e0a6      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a58      	ldr	r2, [pc, #352]	@ (8008a80 <SDMMC_GetCmdResp1+0x1dc>)
 8008920:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff fdc0 	bl	80084a8 <SDMMC_GetCommandResponse>
 8008928:	4603      	mov	r3, r0
 800892a:	461a      	mov	r2, r3
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	4293      	cmp	r3, r2
 8008930:	d001      	beq.n	8008936 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008932:	2301      	movs	r3, #1
 8008934:	e099      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008936:	2100      	movs	r1, #0
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fdc2 	bl	80084c2 <SDMMC_GetResponse>
 800893e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	4b50      	ldr	r3, [pc, #320]	@ (8008a84 <SDMMC_GetCmdResp1+0x1e0>)
 8008944:	4013      	ands	r3, r2
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800894a:	2300      	movs	r3, #0
 800894c:	e08d      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da02      	bge.n	800895a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008954:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008958:	e087      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008964:	2340      	movs	r3, #64	@ 0x40
 8008966:	e080      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008972:	2380      	movs	r3, #128	@ 0x80
 8008974:	e079      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008984:	e071      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008994:	e069      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80089a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089a4:	e061      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80089b4:	e059      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089c4:	e051      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089d4:	e049      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80089e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80089e4:	e041      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80089f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089f4:	e039      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008a04:	e031      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008a14:	e029      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a20:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a24:	e021      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a34:	e019      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008a44:	e011      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a50:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008a54:	e009      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a60:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008a64:	e001      	b.n	8008a6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000000 	.word	0x20000000
 8008a78:	10624dd3 	.word	0x10624dd3
 8008a7c:	00200045 	.word	0x00200045
 8008a80:	002000c5 	.word	0x002000c5
 8008a84:	fdffe008 	.word	0xfdffe008

08008a88 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008a90:	4b1f      	ldr	r3, [pc, #124]	@ (8008b10 <SDMMC_GetCmdResp2+0x88>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1f      	ldr	r2, [pc, #124]	@ (8008b14 <SDMMC_GetCmdResp2+0x8c>)
 8008a96:	fba2 2303 	umull	r2, r3, r2, r3
 8008a9a:	0a5b      	lsrs	r3, r3, #9
 8008a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aa0:	fb02 f303 	mul.w	r3, r2, r3
 8008aa4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	1e5a      	subs	r2, r3, #1
 8008aaa:	60fa      	str	r2, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d102      	bne.n	8008ab6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ab0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ab4:	e026      	b.n	8008b04 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0ef      	beq.n	8008aa6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1ea      	bne.n	8008aa6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2204      	movs	r2, #4
 8008ae0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ae2:	2304      	movs	r3, #4
 8008ae4:	e00e      	b.n	8008b04 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d004      	beq.n	8008afc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e003      	b.n	8008b04 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a06      	ldr	r2, [pc, #24]	@ (8008b18 <SDMMC_GetCmdResp2+0x90>)
 8008b00:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	20000000 	.word	0x20000000
 8008b14:	10624dd3 	.word	0x10624dd3
 8008b18:	002000c5 	.word	0x002000c5

08008b1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008b24:	4b1a      	ldr	r3, [pc, #104]	@ (8008b90 <SDMMC_GetCmdResp3+0x74>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1a      	ldr	r2, [pc, #104]	@ (8008b94 <SDMMC_GetCmdResp3+0x78>)
 8008b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2e:	0a5b      	lsrs	r3, r3, #9
 8008b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b34:	fb02 f303 	mul.w	r3, r2, r3
 8008b38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1e5a      	subs	r2, r3, #1
 8008b3e:	60fa      	str	r2, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008b48:	e01b      	b.n	8008b82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0ef      	beq.n	8008b3a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1ea      	bne.n	8008b3a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2204      	movs	r2, #4
 8008b74:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b76:	2304      	movs	r3, #4
 8008b78:	e003      	b.n	8008b82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a06      	ldr	r2, [pc, #24]	@ (8008b98 <SDMMC_GetCmdResp3+0x7c>)
 8008b7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000000 	.word	0x20000000
 8008b94:	10624dd3 	.word	0x10624dd3
 8008b98:	002000c5 	.word	0x002000c5

08008b9c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	607a      	str	r2, [r7, #4]
 8008ba8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008baa:	4b35      	ldr	r3, [pc, #212]	@ (8008c80 <SDMMC_GetCmdResp6+0xe4>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a35      	ldr	r2, [pc, #212]	@ (8008c84 <SDMMC_GetCmdResp6+0xe8>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	0a5b      	lsrs	r3, r3, #9
 8008bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bba:	fb02 f303 	mul.w	r3, r2, r3
 8008bbe:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	1e5a      	subs	r2, r3, #1
 8008bc4:	61fa      	str	r2, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d102      	bne.n	8008bd0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008bce:	e052      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0ef      	beq.n	8008bc0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1ea      	bne.n	8008bc0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	e03a      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e02f      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff fc46 	bl	80084a8 <SDMMC_GetCommandResponse>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	461a      	mov	r2, r3
 8008c20:	7afb      	ldrb	r3, [r7, #11]
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d001      	beq.n	8008c2a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e025      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	@ (8008c88 <SDMMC_GetCmdResp6+0xec>)
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008c30:	2100      	movs	r1, #0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff fc45 	bl	80084c2 <SDMMC_GetResponse>
 8008c38:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	0c1b      	lsrs	r3, r3, #16
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	e011      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008c60:	e009      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c70:	e001      	b.n	8008c76 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000000 	.word	0x20000000
 8008c84:	10624dd3 	.word	0x10624dd3
 8008c88:	002000c5 	.word	0x002000c5

08008c8c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008c94:	4b22      	ldr	r3, [pc, #136]	@ (8008d20 <SDMMC_GetCmdResp7+0x94>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a22      	ldr	r2, [pc, #136]	@ (8008d24 <SDMMC_GetCmdResp7+0x98>)
 8008c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c9e:	0a5b      	lsrs	r3, r3, #9
 8008ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ca4:	fb02 f303 	mul.w	r3, r2, r3
 8008ca8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	60fa      	str	r2, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008cb8:	e02c      	b.n	8008d14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cbe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0ef      	beq.n	8008caa <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1ea      	bne.n	8008caa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ce6:	2304      	movs	r3, #4
 8008ce8:	e014      	b.n	8008d14 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d004      	beq.n	8008d00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e009      	b.n	8008d14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d002      	beq.n	8008d12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2240      	movs	r2, #64	@ 0x40
 8008d10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008d12:	2300      	movs	r3, #0

}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000000 	.word	0x20000000
 8008d24:	10624dd3 	.word	0x10624dd3

08008d28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008d30:	4b11      	ldr	r3, [pc, #68]	@ (8008d78 <SDMMC_GetCmdError+0x50>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a11      	ldr	r2, [pc, #68]	@ (8008d7c <SDMMC_GetCmdError+0x54>)
 8008d36:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3a:	0a5b      	lsrs	r3, r3, #9
 8008d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	1e5a      	subs	r2, r3, #1
 8008d4a:	60fa      	str	r2, [r7, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d54:	e009      	b.n	8008d6a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0f1      	beq.n	8008d46 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a06      	ldr	r2, [pc, #24]	@ (8008d80 <SDMMC_GetCmdError+0x58>)
 8008d66:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000000 	.word	0x20000000
 8008d7c:	10624dd3 	.word	0x10624dd3
 8008d80:	002000c5 	.word	0x002000c5

08008d84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9c:	f043 0201 	orr.w	r2, r3, #1
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008db2:	b084      	sub	sp, #16
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	f107 001c 	add.w	r0, r7, #28
 8008dc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e008      	b.n	8008de0 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff ffd8 	bl	8008d84 <USB_CoreReset>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dea:	b004      	add	sp, #16
 8008dec:	4770      	bx	lr

08008dee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008df6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008dfa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	43db      	mvns	r3, r3
 8008e04:	401a      	ands	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	641a      	str	r2, [r3, #64]	@ 0x40
 8008e36:	e00b      	b.n	8008e50 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d106      	bne.n	8008e4c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e42:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	641a      	str	r2, [r3, #64]	@ 0x40
 8008e4a:	e001      	b.n	8008e50 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008e5e:	b084      	sub	sp, #16
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	f107 001c 	add.w	r0, r7, #28
 8008e6c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7a:	f023 0201 	bic.w	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8008e82:	2100      	movs	r1, #0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff ffc7 	bl	8008e18 <USB_SetCurrentMode>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ea0:	b004      	add	sp, #16
 8008ea2:	4770      	bx	lr

08008ea4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <memset>:
 8008ec6:	4402      	add	r2, r0
 8008ec8:	4603      	mov	r3, r0
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d100      	bne.n	8008ed0 <memset+0xa>
 8008ece:	4770      	bx	lr
 8008ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed4:	e7f9      	b.n	8008eca <memset+0x4>
	...

08008ed8 <__libc_init_array>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4d0d      	ldr	r5, [pc, #52]	@ (8008f10 <__libc_init_array+0x38>)
 8008edc:	2600      	movs	r6, #0
 8008ede:	4c0d      	ldr	r4, [pc, #52]	@ (8008f14 <__libc_init_array+0x3c>)
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	42a6      	cmp	r6, r4
 8008ee6:	d109      	bne.n	8008efc <__libc_init_array+0x24>
 8008ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8008f18 <__libc_init_array+0x40>)
 8008eea:	2600      	movs	r6, #0
 8008eec:	4c0b      	ldr	r4, [pc, #44]	@ (8008f1c <__libc_init_array+0x44>)
 8008eee:	f000 f817 	bl	8008f20 <_init>
 8008ef2:	1b64      	subs	r4, r4, r5
 8008ef4:	10a4      	asrs	r4, r4, #2
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	d105      	bne.n	8008f06 <__libc_init_array+0x2e>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f00:	3601      	adds	r6, #1
 8008f02:	4798      	blx	r3
 8008f04:	e7ee      	b.n	8008ee4 <__libc_init_array+0xc>
 8008f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	4798      	blx	r3
 8008f0e:	e7f2      	b.n	8008ef6 <__libc_init_array+0x1e>
 8008f10:	08008f50 	.word	0x08008f50
 8008f14:	08008f50 	.word	0x08008f50
 8008f18:	08008f50 	.word	0x08008f50
 8008f1c:	08008f54 	.word	0x08008f54

08008f20 <_init>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

08008f2c <_fini>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr
